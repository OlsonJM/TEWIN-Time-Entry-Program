/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DBExportHistorical.java
 *
 * Created on Nov 9, 2009, 7:11:20 AM
 */


package tewin;
import java.io.*;
import javax.swing.*;
import java.sql.*;

/**
 *
 * @author James M. Olson
 */
public class DBExportHistorical extends javax.swing.JFrame {

    private File inOutFile;

    /** Creates new form DBExportHistorical */
    public DBExportHistorical() {
        initComponents();
        this.inOutFile = null;
        this.tbFilename.setText(null);
        this.lResults.setVisible(false);
        this.bCheckRecords.setEnabled(false);
        this.lbYears.setEnabled(false);
        this.bMoveRecords.setEnabled(false);
        this.cbNewFile.setVisible(false);
        this.lFileSet.setVisible(false);
        this.lbYears.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fc = new javax.swing.JFileChooser();
        bgDataDirection = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bOpenFileChooser = new javax.swing.JButton();
        tbFilename = new javax.swing.JTextField();
        lSelFile = new javax.swing.JLabel();
        lResults = new javax.swing.JLabel();
        lYearList = new javax.swing.JLabel();
        bDone = new javax.swing.JButton();
        rbImport = new javax.swing.JRadioButton();
        rbExport = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbYears = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();
        bCheckRecords = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        lYearList1 = new javax.swing.JLabel();
        bMoveRecords = new javax.swing.JButton();
        cbNewFile = new javax.swing.JCheckBox();
        lFileSet = new javax.swing.JLabel();

        fc.setDialogTitle("Select MDB file");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Database Management - Export Historical Data");
        setResizable(false);

        jLabel1.setText("This tool will allow you to export past years data out of the main");

        jLabel2.setText("database and into a seperate database file. You can import the ");

        jLabel3.setText("data back to the main database at any time using this same tool.");

        jLabel4.setText("Please note that importing without exporting may cause duplicaiton");

        jLabel5.setText("of data entries. Recommend backing up main database before");

        jLabel6.setText("using this tool.");

        jLabel7.setText("!!!PLEASE READ");

        bOpenFileChooser.setText("Select Import File");
        bOpenFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOpenFileChooserActionPerformed(evt);
            }
        });

        lSelFile.setText("2. Selected File");

        lResults.setFont(new java.awt.Font("Tahoma", 0, 18));
        lResults.setText("RESULTS");

        lYearList.setText("4. Select Year(s) to import to main database");

        bDone.setText("Done");
        bDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDoneActionPerformed(evt);
            }
        });

        bgDataDirection.add(rbImport);
        rbImport.setSelected(true);
        rbImport.setText("Import Data");
        rbImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbImportActionPerformed(evt);
            }
        });

        bgDataDirection.add(rbExport);
        rbExport.setText("Export Data");
        rbExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbExportActionPerformed(evt);
            }
        });

        jLabel11.setText("1. Data Function");

        lbYears.setToolTipText("Select multiple items by holding down CTRL key");
        lbYears.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        lbYears.setVisibleRowCount(5);
        jScrollPane1.setViewportView(lbYears);

        bCheckRecords.setText("Check Records");
        bCheckRecords.setToolTipText("Click to populate year list from selected file");
        bCheckRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCheckRecordsActionPerformed(evt);
            }
        });

        lYearList1.setText("3. Check Contents of Selected database File");

        bMoveRecords.setText("IMPORT");
        bMoveRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMoveRecordsActionPerformed(evt);
            }
        });

        cbNewFile.setText("To New File");
        cbNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNewFileActionPerformed(evt);
            }
        });

        lFileSet.setFont(new java.awt.Font("Tahoma", 0, 18));
        lFileSet.setText("RESULTS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(bMoveRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(lResults)
                .addGap(302, 302, 302)
                .addComponent(bDone, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(lFileSet)
                .addContainerGap(423, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lSelFile)
                            .addComponent(jLabel11))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(rbImport)
                                .addGap(35, 35, 35)
                                .addComponent(rbExport)
                                .addGap(18, 18, 18)
                                .addComponent(cbNewFile))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bOpenFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tbFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lYearList)
                            .addComponent(lYearList1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                        .addComponent(bCheckRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(88, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))))
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbExport)
                        .addComponent(rbImport)
                        .addComponent(cbNewFile)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(lSelFile))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tbFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(bOpenFileChooser)))
                .addGap(12, 12, 12)
                .addComponent(lFileSet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lYearList1)
                        .addGap(3, 3, 3))
                    .addComponent(bCheckRecords))
                .addGap(18, 18, 18)
                .addComponent(lYearList)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bMoveRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lResults)
                    .addComponent(bDone))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDoneActionPerformed

        this.dispose();
    }//GEN-LAST:event_bDoneActionPerformed

    private void bOpenFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOpenFileChooserActionPerformed

        this.lResults.setVisible(false);
        this.lFileSet.setVisible(false);

        this.fc.setCurrentDirectory(new java.io.File("."));
        if(this.rbExport.isSelected()&&this.cbNewFile.isSelected())
        {
            //EXPORT TO NEW FILE. SET LOCATION
            this.fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            this.fc.setDialogTitle("Select Directory for Export");
        }else if(this.rbExport.isSelected()&&!this.cbNewFile.isSelected())
        {
            //EXPORT TO EXISTING FILE. SET LOCATION
            this.fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            this.fc.setDialogTitle("Select File for Export");
        }else
        {
            //IMPORTING DATA
            this.fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            this.fc.setDialogTitle("Select File to Import");
        }

        int results = this.fc.showOpenDialog(this);

        if(results == JFileChooser.APPROVE_OPTION){
            this.inOutFile = this.fc.getSelectedFile();
            if(this.rbImport.isSelected()||(this.rbExport.isSelected()&&!this.cbNewFile.isSelected()))
            {
                if(!this.inOutFile.exists())
                {
                    JOptionPane.showMessageDialog(this, "File Does not Exist");
                    this.inOutFile = null;
                    this.tbFilename.setText(null);
                    this.bCheckRecords.setEnabled(false);
                    this.lbYears.setEnabled(false);
                    this.bMoveRecords.setEnabled(false);
                }else
                if(!this.inOutFile.toString().toUpperCase().endsWith(".MDB"))
                {
                    JOptionPane.showMessageDialog(this, "Must Select a *.MDB File");
                    this.inOutFile = null;
                    this.tbFilename.setText(null);
                    this.bCheckRecords.setEnabled(false);
                    this.lbYears.setEnabled(false);
                    this.bMoveRecords.setEnabled(false);
                }else
                {
                    //SHOW FILE SELECTED
                    this.tbFilename.setText(this.inOutFile.toString());
                    this.bCheckRecords.setEnabled(true);
                    this.lbYears.setEnabled(true);
                    this.bMoveRecords.setEnabled(false);
                    this.lFileSet.setText("FILE SET SUCESSFULL");
                    this.lFileSet.setVisible(true);
                }
            }else
            {
                //EXPORTING TO DIRECTORY
                this.tbFilename.setText(this.inOutFile.toString());
                this.bCheckRecords.setEnabled(true);
                this.lbYears.setEnabled(true);
                this.bMoveRecords.setEnabled(false);
                this.lFileSet.setText("EXPORT DIRECTORY SET");
                this.lFileSet.setVisible(true);
            }
        }else
        {
            //CANCEL BUTTON SELECTED ON FILE CHOOSER WINDOW
            this.inOutFile = null;
            this.tbFilename.setText(null);
            this.bCheckRecords.setEnabled(false);
            this.lbYears.setEnabled(false);
            this.bMoveRecords.setEnabled(false);
        }

    }//GEN-LAST:event_bOpenFileChooserActionPerformed

    private void rbImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbImportActionPerformed

        this.bOpenFileChooser.setText("Select Import File");
        this.lYearList.setText("4. Select Year(s) to import to main database");
        this.bMoveRecords.setText("IMPORT");
        this.bCheckRecords.setEnabled(false);
        this.lbYears.setEnabled(false);
        this.cbNewFile.setVisible(false);
        this.lSelFile.setText("2. Selected File");
        this.lSelFile.setVisible(false);
        this.lFileSet.setVisible(false);
        this.bMoveRecords.setEnabled(false);
        this.lbYears.setEnabled(false);
       
    }//GEN-LAST:event_rbImportActionPerformed

    private void rbExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbExportActionPerformed
        this.lYearList.setText("4. Select Year(s) to export from main database");
        this.bMoveRecords.setText("EXPORT");
        this.bCheckRecords.setEnabled(false);
        this.lbYears.setEnabled(false);
        this.cbNewFile.setVisible(true);
        this.cbNewFile.setSelected(true);
        this.bOpenFileChooser.setText("Set Export Directory");
        this.lSelFile.setText("2. Selected Location");
        this.lFileSet.setVisible(false);
        this.bMoveRecords.setEnabled(false);
        this.lbYears.setEnabled(false);
    }//GEN-LAST:event_rbExportActionPerformed

    private void cbNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNewFileActionPerformed
        if(this.cbNewFile.isSelected()){
            this.bOpenFileChooser.setText("Set Export Directory");
            this.lSelFile.setText("2. Selected Location");
        }else
        {
            this.bOpenFileChooser.setText("Select Export File");
            this.lSelFile.setText("2. Selected File");
        }
    }//GEN-LAST:event_cbNewFileActionPerformed

    private void bCheckRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCheckRecordsActionPerformed
        this.lResults.setVisible(false);
        if(populateYearListBox()>0){
            this.lbYears.setEnabled(true);
            this.bMoveRecords.setEnabled(true);
        }else
        {
            this.lbYears.setEnabled(false);
            this.bMoveRecords.setEnabled(false);
        }

    }//GEN-LAST:event_bCheckRecordsActionPerformed

    private void bMoveRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMoveRecordsActionPerformed
        if(this.lbYears.isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "At least One year must be selected from list");
        }else
        {
            if(executeDBmove()){
                this.lResults.setText("Move Successfull");
                this.lResults.setVisible(true);
            }else
            {
              this.lResults.setText("Move Failed");
              this.lResults.setVisible(true);
            }

        }
    }//GEN-LAST:event_bMoveRecordsActionPerformed

    private int populateYearListBox(){
        DataConnection dc;
        ResultSet yrs;
        int resultCount=0;
        int loopCounter;
        boolean found;
        String tempYear;
        DefaultListModel model = new DefaultListModel();
        boolean success = false;

        if(this.rbExport.isSelected())
            dc = new DataConnection();
        else
            dc = new DataConnection(this.tbFilename.getText());

        dc.connect();
        yrs = dc.getYearList();

        try{
            while(yrs.next()){
                tempYear = Integer.toString(yrs.getInt(1));
                found = false;

                //ADD FIRST ITEM
                if(resultCount==0){
                    model.add(resultCount, tempYear);
                    resultCount++;
                }else
                {
                    int temp = model.getSize();
                    //CHECK IF NEW ITEM DETECTED. ADD IF NEW
                    for(loopCounter=0;loopCounter<temp;loopCounter++)
                    {
                        String tmpstr = model.getElementAt(loopCounter).toString();
                        if(tmpstr.equalsIgnoreCase(tempYear))
                        {
                            found = true;
                            break;
                        }

                    }
                    if(!found){
                        model.add(resultCount,tempYear);
                        resultCount++;
                    }
                }
                
                
            }

            if(resultCount==0){
                model.add(0, "NO RECORDS FOUND");
            }

            this.lbYears.setModel(model);
            yrs.close();
            success = true;
            
        }catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error! \n" + e);
            resultCount=0;
            success = false;
        }
        dc.closeConnection();

        return resultCount;

    }

    private boolean executeDBmove(){
        boolean success= false;
        ListModel model = this.lbYears.getModel();
        int[] selectedIndex = this.lbYears.getSelectedIndices();
        String[] selectedYears = new String[selectedIndex.length];
        int counter=0;
        int resultCount;
        DataConnection dcIn;    //source of data
        DataConnection dcOut;   //target of data
        ResultSet rs;
        boolean append = false;

        for(counter=0;counter<selectedIndex.length;counter++)
        {
            selectedYears[counter]=model.getElementAt(selectedIndex[counter]).toString();
        }

        //MAKE DATABASE CONNECTIONS

        if(this.rbExport.isSelected()){
            //Exporting so set output location to main db
            dcIn = new DataConnection();
            //check if exporting to new file
            if(this.cbNewFile.isSelected())
            {
                //ask for new filename
                Object result = JOptionPane.showInputDialog(this,
                        "Enter filename for Exported data\n" +
                        "(without extention .MDB): ");

                if(result.toString().isEmpty())
                    return false;

                File expFile = new File( this.inOutFile.toString() + "\\" + result + ".mdb");
                //if file they extered exists ask if they want to append
                if(expFile.exists())
                {
                    int response = JOptionPane.showConfirmDialog(this,
                        "Backup file already exists\n"+
                        "Do you wish to append data?", "Database Export",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (response != JOptionPane.YES_OPTION){
                        return false;
                    }
                    //select to append. make in
                    dcOut = new DataConnection(expFile.toString());
                }else
                {
                    //file they entered does not exist. Create new
                    if(createNewDB(expFile)){
                        dcOut = new DataConnection(expFile.toString());
                    }else
                        return false;
                }
            }else
            {
                //appending to an existing file. make connection
                dcOut = new DataConnection(this.inOutFile.toString());
                append = true;
            }
        }else if(this.rbImport.isSelected()){
            //input from existing DB file
            dcIn = new DataConnection(this.inOutFile.toString());
            //output to main database
            dcOut = new DataConnection();
        }else
            return false;

        //Build Query
        String query = " * FROM TimeData WHERE ((Year = " +
                selectedYears[0] + ")";
        for(counter=1;counter<selectedYears.length;counter++){
            query+= "OR (Year = " + selectedYears[counter] + ")";
        }
        query+= ")";

        String comQuery = " * FROM Comment WHERE ((Year = " +
                selectedYears[0] + ")";
        for(counter=1;counter<selectedYears.length;counter++){
            comQuery+= "OR (Year = " + selectedYears[counter] + ")";
        }
        comQuery+= ")";

        //Execute Query on out database & get result sets
        dcOut.connect();
        dcIn.connect();

        //Move Data to in data file & delete from out
        Integer[] data = new Integer[3];
        String[] com = new String[10];
        Double[] hrs = new Double[7];

        try{
            //add week data to IN data set & remove from old dataset
            boolean more;
            rs = dcIn.dbQuery("SELECT" + query);
            resultCount = countResults(rs);
            rs = dcIn.dbQuery("SELECT " + query);

            counter = 1;
            while(counter<=resultCount){
                
                rs.next();
                data[2]= rs.getInt(1);
                data[0] = rs.getInt(2);
                data[1] = rs.getInt(3);
                com[0] = rs.getString(4);
                com[1] = rs.getString(5);
                com[2] = rs.getString(6);
                hrs[0] = rs.getDouble(7);
                com[3] = rs.getString(8);
                hrs[1] = rs.getDouble(9);
                com[4] = rs.getString(10);
                hrs[2] = rs.getDouble(11);
                com[5] = rs.getString(12);
                hrs[3] = rs.getDouble(13);
                com[6] = rs.getString(14);
                hrs[4] = rs.getDouble(15);
                com[7] = rs.getString(16);
                hrs[5] = rs.getDouble(17);
                com[8] = rs.getString(18);
                hrs[6] = rs.getDouble(19);
                com[9] = rs.getString(20);
                dcOut.setWeekData(data, hrs, com, true);
                counter++;
                
            }

            rs = dcIn.dbQuery("SELECT" + comQuery);
            resultCount = countResults(rs);
            rs = dcIn.dbQuery("SELECT" + comQuery);

            Integer ID,week,year;
            String comment;
            counter = 1;
            while(counter<=resultCount){
                    rs.next();
                    ID = rs.getInt(1);
                    year = rs.getInt(2);
                    week = rs.getInt(3);
                    comment = rs.getString(4);
                    dcOut.setComment(0, year, week, comment, true);
                    //dcIn.deleteComment(ID);
                    counter++;
            }
            rs.close();
            dcOut.closeConnection();
            
            //remove records from input db
            dcIn.dbQuery("DELETE" + query);
            dcIn.dbQuery("DELETE" + comQuery);
            dcIn.closeConnection();

            success = true;
     }catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error occured moving data\n"+e);
            return false;
        }
     
        return success;

    }

    private boolean createNewDB(File expFile){
        boolean success = false;
        SettingsForm sf = new SettingsForm();

        File template = new File(sf.getProgramLocation() + "\\template.mdb");
        
        if(!template.exists()){
            JOptionPane.showMessageDialog(this, "Template File missing from " + sf.getProgramLocation());
            return false;
        }

        try{
            Utilities u = new Utilities();
            u.copy(template,expFile);
            success = true;
        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Creating DB File.. ");
            return false;
        }

        return success;

    }

    private int countResults(ResultSet rs){
        int count = 0;
        try{
            while(rs.next()){
                count++;
            }

        }catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Counting Results\n"+e);
        }

        return count;
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCheckRecords;
    private javax.swing.JButton bDone;
    private javax.swing.JButton bMoveRecords;
    private javax.swing.JButton bOpenFileChooser;
    private javax.swing.ButtonGroup bgDataDirection;
    private javax.swing.JCheckBox cbNewFile;
    private javax.swing.JFileChooser fc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lFileSet;
    private javax.swing.JLabel lResults;
    private javax.swing.JLabel lSelFile;
    private javax.swing.JLabel lYearList;
    private javax.swing.JLabel lYearList1;
    private javax.swing.JList lbYears;
    private javax.swing.JRadioButton rbExport;
    private javax.swing.JRadioButton rbImport;
    private javax.swing.JTextField tbFilename;
    // End of variables declaration//GEN-END:variables

}

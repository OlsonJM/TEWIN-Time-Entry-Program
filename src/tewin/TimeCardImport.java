/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimeCardImport.java
 *
 * Created on Oct 27, 2009, 3:25:27 PM
 */

package tewin;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.*;
import java.io.*;
import java.util.Scanner;
import java.sql.*;
/**
 *
 * @author E0051024
 */
public class TimeCardImport extends javax.swing.JFrame {

    private DataConnection dc;
    private Calendar now;
    private boolean datesSet;
    private boolean fileSet;
    private boolean datesVerified;
    private Integer[] years;
    private Double[] hrs;
    private Integer[] data;
    private String[] com;
    private File importFile;


    /** Creates new form TimeCardImport */
    public TimeCardImport() {
        initComponents();
        this.now = Calendar.getInstance();
        initComboBoxes();
        this.datesSet = false;
        this.fileSet = false;
        this.datesVerified = false;
        this.lStep1Done.setVisible(false);
        this.lStep2Done.setVisible(false);
        this.lStep3Done.setVisible(false);
        this.lUploadComplete.setVisible(false);
        this.bSetDate.setEnabled(false);
        this.bVerified.setEnabled(false);
        this.bSubmit.setEnabled(false);
        this.hrs = new Double[7];
        this.com = new String[10];
        this.data = new Integer[3];
        this.dc = new DataConnection();
        this.lDates.setText("");
    }

    private void initComboBoxes(){
        int counter,arrayCtr;
        int currYear;
        //this.weeks = new Integer[52];
        this.years = new Integer[7];

        arrayCtr = 0;

        currYear = this.now.get(Calendar.YEAR);
        arrayCtr = 0;
        for(counter=currYear-2;counter<=currYear+2;counter++)
        {
            this.cbYear.addItem(makeObj(Integer.toString(counter)));
            this.years[arrayCtr++] = counter;
        }
        this.cbYear.setSelectedIndex(2);
        this.sWeek.getModel().setValue(this.now.get(Calendar.WEEK_OF_YEAR));
    }

    private Object makeObj(final String item)  {
        return new Object() {@Override
        public String toString() { return item; } };
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lFile = new javax.swing.JLabel();
        tbFile = new javax.swing.JTextField();
        bSelectFile = new javax.swing.JButton();
        lWeek = new javax.swing.JLabel();
        lYear = new javax.swing.JLabel();
        cbYear = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bSubmit = new javax.swing.JButton();
        bDone = new javax.swing.JButton();
        lDates = new javax.swing.JLabel();
        bSetDate = new javax.swing.JButton();
        lStep1Done = new javax.swing.JLabel();
        lStep2Done = new javax.swing.JLabel();
        bVerified = new javax.swing.JButton();
        lStep3Done = new javax.swing.JLabel();
        lUploadComplete = new javax.swing.JLabel();
        sWeek = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Time Card Import");
        setLocationByPlatform(true);
        setResizable(false);

        lFile.setText("Import File");

        tbFile.setToolTipText("Enter filename with path or use select button");

        bSelectFile.setText("Select");
        bSelectFile.setToolTipText("Click to open File Chooser Window");
        bSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelectFileActionPerformed(evt);
            }
        });

        lWeek.setText("Week");

        lYear.setText("Year");

        cbYear.setEditable(true);
        cbYear.setMaximumRowCount(10);
        cbYear.setToolTipText("Set time card Year");
        cbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbYearActionPerformed(evt);
            }
        });

        jLabel1.setText("2.  Set Week and Year to which the time card is to be applied");

        jLabel2.setText("1.  Select Time Card Template or Data file (*.CSV)");

        jLabel3.setText("3.  Verify correct Date periods for time card are shown below");

        jLabel5.setText("4.  Click SUBMIT to upload time card to Database");

        bSubmit.setText("Submit to Database");
        bSubmit.setToolTipText("Click to commit selected file to database");
        bSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSubmitActionPerformed(evt);
            }
        });

        bDone.setText("Done");
        bDone.setToolTipText("Click to return to Main Program");
        bDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDoneActionPerformed(evt);
            }
        });

        lDates.setText("date range");

        bSetDate.setText("Set");
        bSetDate.setToolTipText("Click to set Time Card Date");
        bSetDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSetDateActionPerformed(evt);
            }
        });

        lStep1Done.setFont(new java.awt.Font("Tahoma", 1, 12));
        lStep1Done.setForeground(new java.awt.Color(0, 0, 255));
        lStep1Done.setText("DONE");

        lStep2Done.setFont(new java.awt.Font("Tahoma", 1, 12));
        lStep2Done.setForeground(new java.awt.Color(0, 0, 255));
        lStep2Done.setText("DONE");

        bVerified.setText("Verified");
        bVerified.setToolTipText("Click to verify Time Card Date");
        bVerified.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVerifiedActionPerformed(evt);
            }
        });

        lStep3Done.setFont(new java.awt.Font("Tahoma", 1, 12));
        lStep3Done.setForeground(new java.awt.Color(0, 0, 255));
        lStep3Done.setText("DONE");

        lUploadComplete.setFont(new java.awt.Font("Tahoma", 1, 18));
        lUploadComplete.setForeground(new java.awt.Color(0, 0, 255));
        lUploadComplete.setText("UPLOAD COMPLETE");

        sWeek.setModel(new javax.swing.SpinnerNumberModel(26, 1, 52, 1));
        sWeek.setToolTipText("Set time card week of year");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(lWeek))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(bSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(lUploadComplete))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(lDates))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(lStep2Done))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lFile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(sWeek, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addComponent(lYear))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(bSetDate))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tbFile, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bSelectFile))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(417, 417, 417)
                                        .addComponent(bDone, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(lStep1Done))
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bVerified)
                                    .addComponent(lStep3Done))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lStep1Done))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSelectFile)
                    .addComponent(lFile))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lStep2Done))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lWeek)
                        .addGap(28, 28, 28))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lYear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bSetDate)
                            .addComponent(sWeek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lStep3Done))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDates)
                    .addComponent(bVerified))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lUploadComplete))
                .addGap(18, 18, 18)
                .addComponent(bDone)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSetDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSetDateActionPerformed
        int weekSel = (Integer)this.sWeek.getValue();
        int yearSel = this.cbYear.getSelectedIndex();

        this.now.set(Calendar.YEAR,this.years[yearSel]);
        this.now.set(Calendar.WEEK_OF_YEAR,weekSel);
        this.now.set(Calendar.DAY_OF_WEEK, 1);

        DateFormat dateFormat = new SimpleDateFormat("MMMMM dd, yyyy");
        String dateString = dateFormat.format(this.now.getTime());
        this.now.set(Calendar.DAY_OF_WEEK,7);
        dateString+= " - " + dateFormat.format(this.now.getTime());
        this.lDates.setText(dateString);
        if(this.fileSet){
            this.datesSet = true;
            this.datesVerified = false;
            this.lStep1Done.setVisible(true);
            this.lStep2Done.setVisible(true);
            this.lStep3Done.setVisible(false);
            this.lUploadComplete.setVisible(false);
            this.bVerified.setEnabled(true);
            this.bSubmit.setEnabled(false);
        }

    }//GEN-LAST:event_bSetDateActionPerformed

    private void bSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectFileActionPerformed
        JFileChooser fc = new JFileChooser();
        if(fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            this.tbFile.setText(fc.getSelectedFile().toString().toUpperCase());
            if(this.tbFile.getText().endsWith(".CSV")){
                importFile = fc.getSelectedFile();
                this.datesSet = false;
                this.fileSet = true;
                this.datesVerified = false;
                this.lStep1Done.setVisible(true);
                this.lStep2Done.setVisible(false);
                this.lStep3Done.setVisible(false);
                this.lUploadComplete.setVisible(false);
                this.bSetDate.setEnabled(true);
                this.bVerified.setEnabled(false);
                this.bSubmit.setEnabled(false);
            }else
            {
                JOptionPane.showMessageDialog(this, "File must be a type *.CSV");
                this.datesSet = false;
                this.fileSet = false;
                this.datesVerified = false;
                this.lStep1Done.setVisible(false);
                this.lStep2Done.setVisible(false);
                this.lStep3Done.setVisible(false);
                this.lUploadComplete.setVisible(false);
                this.bSetDate.setEnabled(true);
                this.bVerified.setEnabled(false);
                this.bSubmit.setEnabled(false);
            }
        }
    }//GEN-LAST:event_bSelectFileActionPerformed

    private void bVerifiedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVerifiedActionPerformed
        if(this.fileSet&&this.datesSet){
            this.datesVerified = true;
            this.lStep1Done.setVisible(true);
            this.lStep2Done.setVisible(true);
            this.lStep3Done.setVisible(true);
            this.lUploadComplete.setVisible(false);
            this.bSubmit.setEnabled(true);
        }

    }//GEN-LAST:event_bVerifiedActionPerformed

    private void bDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDoneActionPerformed
        this.dispose();
    }//GEN-LAST:event_bDoneActionPerformed

    private void cbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbYearActionPerformed
        this.lStep3Done.setVisible(false);
        this.datesVerified = false;
        this.lUploadComplete.setVisible(false);
        this.bSubmit.setEnabled(false);
        this.bVerified.setEnabled(false);
        
    }//GEN-LAST:event_cbYearActionPerformed

    private void bSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSubmitActionPerformed
        if(this.datesVerified){
            this.lUploadComplete.setVisible(false);
            this.lUploadComplete.setText("Upload Sucessfull");
            uploadDataFromFile();
        }

    }//GEN-LAST:event_bSubmitActionPerformed

   private void uploadDataFromFile(){
       String phrase;
       String delims = ",";
       boolean gotComment=false;
       boolean foundlines=false;
       boolean gotLines=false;
       boolean abort = false;
       int counter;

       try {
            Scanner s = null;
            try {
                s = new Scanner(new BufferedReader(new FileReader(this.importFile)));

                while (s.hasNextLine()) {
                    phrase = s.nextLine();
                    String[] tokens = phrase.split(delims);
                    if(abort){
                        this.lUploadComplete.setText("FAILED");
                        this.lUploadComplete.setVisible(true);
                        this.dc.closeConnection();
                        return;
                    }

                    //GET COMMENT
                    if(!gotComment)
                    {
                        for(counter=0;counter<=tokens.length-1;counter++)
                        {
                            if(tokens[counter].equalsIgnoreCase("Comments"))
                            {
                                if(tokens.length==1){
                                    gotComment = true;
                                    break;
                                }
                                if((counter+1)>tokens.length){
                                    //uploadComment("");
                                    gotComment=true;
                                    break;
                                }else if(tokens[counter+1].equalsIgnoreCase("STOP_HEADER"))
                                {
                                    //uploadComment("");
                                    gotComment=true;
                                    break;
                                }else if(tokens[counter+1]==null){
                                    //uploadComment("");
                                    gotComment=true;
                                    break;
                                }else if(tokens[counter+1].equalsIgnoreCase(""))
                                {
                                    //uploadComment("");
                                    gotComment=true;
                                    break;
                                }else
                                {
                                    uploadComment(tokens[counter+1]);
                                    gotComment = true;
                                    break;
                                }

                            }
                        }
                    }
                    //UPLOAD LINES (CATCH ON NEXT LINE AFTER THE FIND START CHECK PASSES
                    if(foundlines)
                    {
                        //check for end or zero records
                        for(counter=0;counter<=tokens.length-1;counter++)
                        {
                            if(tokens[counter].equalsIgnoreCase("STOP_TEMPLATE")){
                                gotLines = true;
                                break;
                            }
                        }
                        if(!gotLines){
                            if(tokens.length>=3){
                                resetDataArrays();
                                this.dc.connect();
                                //SET WEEK FOR DATABASE
                                this.data[0] = this.now.get(Calendar.YEAR);
                                //SET YEAR FOR DATABASE
                                this.data[1] = this.now.get(Calendar.WEEK_OF_YEAR);
                                //JOB NUMBER
                                this.com[0] = tokens[0];
                                //TASK ID
                                this.com[1] = tokens[1];
                                //LABOR TYPE
                                this.com[2] = tokens[2];
                                //SUNDAY HOURS
                                if(tokens.length>=4){
                                    if(tokens[3].equalsIgnoreCase(""))
                                        this.hrs[0] = 0.0;
                                    else
                                        this.hrs[0] = Double.valueOf(tokens[3]);
                                }

                                //SUNDAY COMMENT
                                if(tokens.length>=5)
                                    this.com[3] = tokens[4];

                                //MONDAY HOURS
                                if(tokens.length>=6){
                                    if(tokens[5].equalsIgnoreCase(""))
                                        this.hrs[1] = 0.0;
                                    else
                                        this.hrs[1] = Double.valueOf(tokens[5]);
                                }
                                //MONDAY COMMENT
                                if(tokens.length>=7)
                                    this.com[4] = tokens[6];

                                //TUESDAY HOURS
                                if(tokens.length>=8){
                                    if(tokens[7].equalsIgnoreCase(""))
                                        this.hrs[2] = 0.0;
                                    else
                                        this.hrs[2] = Double.valueOf(tokens[7]);
                                }

                                //TUESDAY COMMENT
                                if(tokens.length>=9)
                                    this.com[5] = tokens[8];

                                //WEDNESDAY HOURS
                                if(tokens.length>=10){
                                    if(tokens[9].equalsIgnoreCase(""))
                                        this.hrs[3] = 0.0;
                                    else
                                        this.hrs[3] = Double.valueOf(tokens[9]);
                                }
                                //WEDNESDAY COMMENT
                                if(tokens.length>=11)
                                    this.com[6] = tokens[10];

                                //THURSDAY HOURS
                                if(tokens.length>=12){
                                    if(tokens[11].equalsIgnoreCase(""))
                                        this.hrs[4] = 0.0;
                                    else
                                        this.hrs[4] = Double.valueOf(tokens[11]);
                                }
                                //THURSDAY COMMENT
                                if(tokens.length>=13)
                                    this.com[7] = tokens[12];
                                //FRIDAY HOURS
                                if(tokens.length>=14){
                                    if(tokens[13].equalsIgnoreCase(""))
                                        this.hrs[5] = 0.0;
                                    else
                                        this.hrs[5] = Double.valueOf(tokens[13]);
                                }
                                //FRIDAY COMMENT
                                if(tokens.length>=14)
                                    this.com[8] = tokens[14];
                                //SATURDAY HOURS
                                if(tokens.length>=15){
                                    if(tokens[15].equalsIgnoreCase(""))
                                        this.hrs[6] = 0.0;
                                    else
                                        this.hrs[6] = Double.valueOf(tokens[15]);
                                }
                                //SATURDAY COMMENT
                                if(tokens.length>=16)
                                    this.com[9] = tokens[16];
                                
                                this.dc.setWeekData(data, hrs, com, true);
                                
                                this.dc.closeConnection();
                            }else{
                                JOptionPane.showMessageDialog(this,
                                        "File Time Card Line not properly formatted");
                                abort = true;
                                break;

                            }


                        }

                    }else

                    //FIND START OF TIME CARD LINES
                    if(gotComment&&!gotLines)
                    {
                        for(counter=0;counter<=tokens.length-1;counter++)
                        {
                            if(tokens[counter].equalsIgnoreCase("END_COLUMN"))
                                foundlines = true;
                        }
                    }

                    //ALL DATA UPLOADED. STOP READING FILE
                    if(gotLines)
                    {
                        this.lUploadComplete.setVisible(true);
                        Utilities u = new Utilities();
                        u.updateOTdb(this.now.get(Calendar.YEAR), this.now.get(Calendar.WEEK_OF_YEAR));
                        break;
                    }
                }
            }finally {
                if (s != null) {
                    s.close();
                }
            }
       }catch(Exception e) {
            e.printStackTrace();
        }

}

   private void uploadComment(String comment){
       this.dc.connect();
       boolean newComment=false;
       ResultSet rs;
       int commentID;

       rs = this.dc.getComment(this.now.get(Calendar.YEAR), this.now.get(Calendar.WEEK_OF_YEAR));

        try{
            if(rs.next()){
                commentID = rs.getInt(1);
                newComment = false;
            }else
            {
                newComment = true;
                commentID = -1;
            }
            rs.close();
        }
         catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error accessing comment from DB\n" +e);
            newComment = true;
            commentID = -1;
        }

        this.dc.setComment(commentID,this.now.get(Calendar.YEAR), this.now.get(Calendar.WEEK_OF_YEAR),
                   comment, newComment);
        this.dc.closeConnection();

   }

   private void resetDataArrays(){
       int counter;
       for(counter=0;counter<=2;counter++)
       {
           this.data[counter]= 0;
       }
       for(counter=0;counter<=9;counter++)
       {
           this.com[counter]="";
       }
       for(counter=0;counter<=6;counter++)
       {
           this.hrs[counter]= 0.0;
       }
   }






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDone;
    private javax.swing.JButton bSelectFile;
    private javax.swing.JButton bSetDate;
    private javax.swing.JButton bSubmit;
    private javax.swing.JButton bVerified;
    private javax.swing.JComboBox cbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lDates;
    private javax.swing.JLabel lFile;
    private javax.swing.JLabel lStep1Done;
    private javax.swing.JLabel lStep2Done;
    private javax.swing.JLabel lStep3Done;
    private javax.swing.JLabel lUploadComplete;
    private javax.swing.JLabel lWeek;
    private javax.swing.JLabel lYear;
    private javax.swing.JSpinner sWeek;
    private javax.swing.JTextField tbFile;
    // End of variables declaration//GEN-END:variables

}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimeCardForm.java
 *
 * Created on Oct 14, 2009, 10:17:07 PM
 */

package tewin;
import java.awt.Color;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author James M. Olson
 */
public class TimeCardForm extends javax.swing.JFrame {

    //private DataConnection dc;
    private int weekNumber;
    private int year;
    //private ResultSet rs;
    private int rowPosition;
    private int lastPosition;
    private int maxRows;
    private TimeCardComment tcc;
    private boolean onNewForm;
    private Double tcTotal;
    private Utilities u;
    //private int lineID;
    private Expenses expEntry;
    private boolean formChanged;
    private Integer[] recordID;
    private javax.swing.JTextField[] hrsCom;


    /** Creates new form TimeCardForm */
    public TimeCardForm() {
        initComponents();
        this.u = new Utilities();
    }

    public TimeCardForm(int year, int week) {
        this.u = new Utilities();
        this.expEntry = new Expenses();
        this.weekNumber = week;
        this.year = year;
        initComponents();
        initArrays();
        setDays();
        //getRecords();
        resetForm();
     
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lSun = new javax.swing.JLabel();
        lMon = new javax.swing.JLabel();
        lTue = new javax.swing.JLabel();
        lWed = new javax.swing.JLabel();
        lThu = new javax.swing.JLabel();
        lFri = new javax.swing.JLabel();
        lSat = new javax.swing.JLabel();
        tbSunHrs = new javax.swing.JTextField();
        tbMonHrs = new javax.swing.JTextField();
        tbTueHrs = new javax.swing.JTextField();
        tbWedHrs = new javax.swing.JTextField();
        tbThuHrs = new javax.swing.JTextField();
        tbFriHrs = new javax.swing.JTextField();
        tbSatHrs = new javax.swing.JTextField();
        tbSunCom = new javax.swing.JTextField();
        tbMonCom = new javax.swing.JTextField();
        tbTueCom = new javax.swing.JTextField();
        tbWedCom = new javax.swing.JTextField();
        tbThuCom = new javax.swing.JTextField();
        tbFriCom = new javax.swing.JTextField();
        tbSatCom = new javax.swing.JTextField();
        lJobNum = new javax.swing.JLabel();
        lTaskID = new javax.swing.JLabel();
        lLaborType = new javax.swing.JLabel();
        tbTaskID = new javax.swing.JTextField();
        cbLaborType = new javax.swing.JComboBox();
        lComments = new javax.swing.JLabel();
        lHrs = new javax.swing.JLabel();
        bPrevLine = new javax.swing.JButton();
        bNextLine = new javax.swing.JButton();
        bSave = new javax.swing.JButton();
        bExit = new javax.swing.JButton();
        lCurrLine = new javax.swing.JLabel();
        lPosition = new javax.swing.JLabel();
        lTotLines = new javax.swing.JLabel();
        lCurPos = new javax.swing.JLabel();
        lTotHrs = new javax.swing.JLabel();
        lLineTotal = new javax.swing.JLabel();
        lTCTot = new javax.swing.JLabel();
        lTCTotalHrs = new javax.swing.JLabel();
        cbJobs = new javax.swing.JComboBox();
        bDelete = new javax.swing.JButton();
        bInsert = new javax.swing.JButton();
        bComment = new javax.swing.JButton();
        bSunExp = new javax.swing.JButton();
        bMonExp = new javax.swing.JButton();
        bTueExp = new javax.swing.JButton();
        bWedExp = new javax.swing.JButton();
        bThuExp = new javax.swing.JButton();
        bFriExp = new javax.swing.JButton();
        bSatExp = new javax.swing.JButton();
        ID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Time Card Form");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setName("TCForm"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lSun.setText("Sunday");

        lMon.setText("Monday");

        lTue.setText("Tuesday");

        lWed.setText("Wednesday");

        lThu.setText("Thursday");

        lFri.setText("Friday");

        lSat.setText("Saturday");

        tbSunHrs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tbSunHrs.setToolTipText("Enter Sunday Hours");
        tbSunHrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbMonHrs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tbMonHrs.setToolTipText("Enter Monday Hours");
        tbMonHrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbTueHrs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tbTueHrs.setToolTipText("Enter Tuesday Hours");
        tbTueHrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbWedHrs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tbWedHrs.setToolTipText("Enter Wednesday Hours");
        tbWedHrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbThuHrs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tbThuHrs.setToolTipText("Enter Thursday Hours");
        tbThuHrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbFriHrs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tbFriHrs.setToolTipText("Enter Friday Hours");
        tbFriHrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbSatHrs.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tbSatHrs.setToolTipText("Enter Saturday Hours");
        tbSatHrs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbSunCom.setToolTipText("Enter Comment");
        tbSunCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbMonCom.setToolTipText("Enter Comment");
        tbMonCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbTueCom.setToolTipText("Enter Comment");
        tbTueCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbWedCom.setToolTipText("Enter Comment");
        tbWedCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbThuCom.setToolTipText("Enter Comment");
        tbThuCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbFriCom.setToolTipText("Enter Comment");
        tbFriCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        tbSatCom.setToolTipText("Enter Comment");
        tbSatCom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        lJobNum.setText("Job Number");

        lTaskID.setText("Task ID");

        lLaborType.setText("Labor Type");

        tbTaskID.setToolTipText("Enter Task ID");
        tbTaskID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        cbLaborType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EESD Labor", "EESD Time and Half", "EESD Double Time", "EESD Unassigned", "EESD Unapplied", "EESD Authorized", "EESD Holiday", "EESD Vacation", "EESD Safety", "EESD Training", "EESD Marketing", "EESD Sick" }));
        cbLaborType.setToolTipText("Select Labor type from drop-down or type in custom value");
        cbLaborType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbChanged(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mouseChange(evt);
            }
        });
        cbLaborType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        lComments.setText("Comments");

        lHrs.setText("Time");

        bPrevLine.setText("< Prev. Line");
        bPrevLine.setToolTipText("Move to Previous Line on Time Card");
        bPrevLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPrevLineActionPerformed(evt);
            }
        });

        bNextLine.setText("Next Line >");
        bNextLine.setToolTipText("Move to next line on time Card");
        bNextLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bNextLineActionPerformed(evt);
            }
        });

        bSave.setText("Save");
        bSave.setToolTipText("Save changes to current line");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        bExit.setText("Exit");
        bExit.setToolTipText("Exit or Cancel");
        bExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExitActionPerformed(evt);
            }
        });

        lCurrLine.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lCurrLine.setText("Total Lines");

        lPosition.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lPosition.setText("Line Position");

        lTotLines.setText("0");

        lCurPos.setText("0");

        lTotHrs.setText("0");

        lLineTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lLineTotal.setText("Line Total");

        lTCTot.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lTCTot.setText("Time Card Total");

        lTCTotalHrs.setText("0");

        cbJobs.setEditable(true);
        cbJobs.setToolTipText("Select Job Number from List or Type in New");
        cbJobs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbChanged(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mouseChange(evt);
            }
        });
        cbJobs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TimeCardForm.this.keyTyped(evt);
            }
        });

        bDelete.setText("Delete");
        bDelete.setToolTipText("Delete current line from time card (no undo)");
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        bInsert.setText("Add Line");
        bInsert.setToolTipText("Add a new line to time card");
        bInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInsertActionPerformed(evt);
            }
        });

        bComment.setText("Add/Update Time Card Comment");
        bComment.setToolTipText("Click to Add Comment for Entire Time Card");
        bComment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCommentActionPerformed(evt);
            }
        });

        bSunExp.setText("$$$");
        bSunExp.setToolTipText("Sunday Expense");
        bSunExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSunExpActionPerformed(evt);
            }
        });

        bMonExp.setText("$$$");
        bMonExp.setToolTipText("Sunday Expense");
        bMonExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bMonExpActionPerformed(evt);
            }
        });

        bTueExp.setText("$$$");
        bTueExp.setToolTipText("Sunday Expense");
        bTueExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTueExpActionPerformed(evt);
            }
        });

        bWedExp.setText("$$$");
        bWedExp.setToolTipText("Sunday Expense");
        bWedExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bWedExpActionPerformed(evt);
            }
        });

        bThuExp.setText("$$$");
        bThuExp.setToolTipText("Sunday Expense");
        bThuExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bThuExpActionPerformed(evt);
            }
        });

        bFriExp.setText("$$$");
        bFriExp.setToolTipText("Sunday Expense");
        bFriExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFriExpActionPerformed(evt);
            }
        });

        bSatExp.setText("$$$");
        bSatExp.setToolTipText("Sunday Expense");
        bSatExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSatExpActionPerformed(evt);
            }
        });

        ID.setText("ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lLaborType, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lJobNum, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbJobs, 0, 262, Short.MAX_VALUE)
                            .addComponent(cbLaborType, 0, 262, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lTaskID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbTaskID, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bComment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(bPrevLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(bSave, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(bExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(bNextLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(ID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(78, 78, 78)
                                        .addComponent(lHrs)
                                        .addGap(33, 33, 33)
                                        .addComponent(lComments))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lTue)
                                            .addComponent(lSun)
                                            .addComponent(lMon)
                                            .addComponent(lWed)
                                            .addComponent(lThu)
                                            .addComponent(lSat)
                                            .addComponent(lFri))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tbSunHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbMonHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbTueHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbSatHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbWedHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbThuHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbFriHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tbSunCom, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbTueCom, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbFriCom, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbThuCom, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbSatCom, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbMonCom, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tbWedCom, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(bSatExp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bFriExp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bThuExp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bWedExp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bTueExp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bMonExp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(bSunExp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lCurrLine, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lPosition, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lCurPos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lTotLines, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lLineTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lTCTot, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lTCTotalHrs, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lTotHrs))
                .addGap(55, 55, 55))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbJobs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lJobNum)
                    .addComponent(lTaskID)
                    .addComponent(tbTaskID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lLaborType)
                    .addComponent(cbLaborType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lTotHrs)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lCurrLine)
                        .addComponent(lTotLines))
                    .addComponent(lLineTotal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lPosition, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lCurPos, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lTCTot, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lTCTotalHrs, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lHrs)
                    .addComponent(lComments))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSun)
                    .addComponent(tbSunHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbSunCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSunExp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lMon)
                    .addComponent(tbMonHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbMonCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bMonExp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lTue)
                    .addComponent(tbTueHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbTueCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bTueExp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbWedHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbWedCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lWed)
                    .addComponent(bWedExp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lThu)
                    .addComponent(tbThuHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbThuCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bThuExp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbFriHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbFriCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lFri)
                    .addComponent(bFriExp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSat)
                    .addComponent(tbSatHrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbSatCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSatExp))
                .addGap(18, 18, 18)
                .addComponent(bComment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bDelete)
                    .addComponent(bSave)
                    .addComponent(bInsert))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bExit)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bNextLine)
                        .addComponent(ID))
                    .addComponent(bPrevLine))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initArrays()
    {
        this.rowPosition = 0;
        this.lastPosition = 0;
        hrsCom = new javax.swing.JTextField[14];
        hrsCom[0] = tbSunHrs;
        hrsCom[1] = tbSunCom;
        hrsCom[2] = tbMonHrs;
        hrsCom[3] = tbMonCom;
        hrsCom[4] = tbTueHrs;
        hrsCom[5] = tbTueCom;
        hrsCom[6] = tbWedHrs;
        hrsCom[7] = tbWedCom;
        hrsCom[8] = tbThuHrs;
        hrsCom[9] = tbThuCom;
        hrsCom[10] = tbFriHrs;
        hrsCom[11] = tbFriCom;
        hrsCom[12] = tbSatHrs;
        hrsCom[13] = tbSatCom;

    }
    private void bExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExitActionPerformed
 
        //CHECK IF "CANCEL IS DEPRESSED ON NEW FORM && NOT ON A TIME CARD
        //WITH ONLY ONE FORM (CLOSING WITHOUT ADDING ANY ROWS OF DATA)
        if(this.onNewForm&&!(this.maxRows==0)){
            resetForm();
            this.onNewForm=false;
            this.bExit.setText("Exit");
            this.bDelete.setEnabled(true);
            this.bInsert.setEnabled(true);
            this.bSunExp.setEnabled(true);
            this.bMonExp.setEnabled(true);
            this.bTueExp.setEnabled(true);
            this.bWedExp.setEnabled(true);
            this.bThuExp.setEnabled(true);
            this.bFriExp.setEnabled(true);
            this.bSatExp.setEnabled(true);

        }else
        //NORMAL EXIT BUTTON DEPRESSED
        {
            this.dispose();
        }
    }//GEN-LAST:event_bExitActionPerformed

    private void bNextLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bNextLineActionPerformed

        if(formEntryValid().length()!=0)
            return;
        if(formChanged)
        {
            if(!saveForm())
                return;
        }
        this.onNewForm = false;
        populateFormData(1);
    }//GEN-LAST:event_bNextLineActionPerformed

    private void bPrevLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPrevLineActionPerformed

        if(formEntryValid().length()!=0)
            return;
        if(formChanged)
        {
            if(!saveForm())
                return;
        }
        this.onNewForm = false;
        populateFormData(-1);
    }//GEN-LAST:event_bPrevLineActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed

        if(!saveForm())
            return;

        this.bSunExp.setEnabled(true);
        this.bMonExp.setEnabled(true);
        this.bTueExp.setEnabled(true);
        this.bWedExp.setEnabled(true);
        this.bThuExp.setEnabled(true);
        this.bFriExp.setEnabled(true);
        this.bSatExp.setEnabled(true);

        resetForm();
        
    }//GEN-LAST:event_bSaveActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed

        DataConnection dc = new DataConnection();
        dc.connect();
        try{
           //record set greater than 1 and at end of set
           if(this.rowPosition>0&&(this.rowPosition==this.maxRows)&&this.maxRows>1){
               if(dc.deleteRecord(Integer.parseInt(ID.getText()))){
                    this.rowPosition--;
                    this.lastPosition = this.rowPosition;
                }
           }else

           //record set greater than 1 and anywhere in the set
           if(this.rowPosition>0&&this.maxRows>1){
               if(dc.deleteRecord(Integer.parseInt(ID.getText()))){
                    this.lastPosition = this.rowPosition;
                }
           }else

           //recordset of only 1
           if(this.rowPosition==1&&this.maxRows==1){
                if(dc.deleteRecord(Integer.parseInt(ID.getText()))){
                    this.lastPosition = 0;
                }
           }

           this.u.updateOTdb(this.year, this.weekNumber);
           dc.deleteLineExpenses(Integer.parseInt(ID.getText()));
           resetForm();
           
        }catch (Exception e)
        {
            connectionErr(e);
            JOptionPane.showMessageDialog(this, "Error occured:" + e);
        }
        dc.closeConnection();
    }//GEN-LAST:event_bDeleteActionPerformed

    private void bInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInsertActionPerformed

       try{
           if(formEntryValid().length()==0){
                if(!saveForm())
                    return;
                clearFields();
                newTimeCard();


           }
       }
       catch (Exception e) {
           connectionErr(e);

       }
    }//GEN-LAST:event_bInsertActionPerformed

    private void newTimeCard(){
        this.cbJobs.setSelectedIndex(-1);
        this.lCurPos.setText("NEW");
        this.lTotHrs.setText("0.0");
        this.lTCTotalHrs.setText("0.0");
        if(this.maxRows ==0)
            this.bExit.setText("Exit");
        else
            this.bExit.setText("Cancel");
        this.onNewForm = true;
        this.bNextLine.setEnabled(false);
        this.bPrevLine.setEnabled(false);
        this.bDelete.setEnabled(false);
        this.bInsert.setEnabled(false);
        this.bSunExp.setEnabled(false);
        this.bMonExp.setEnabled(false);
        this.bTueExp.setEnabled(false);
        this.bWedExp.setEnabled(false);
        this.bThuExp.setEnabled(false);
        this.bFriExp.setEnabled(false);
        this.bSatExp.setEnabled(false);


    }

    private void bCommentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCommentActionPerformed
        if(this.tcc==null||!this.tcc.isShowing()){
            this.tcc = new TimeCardComment(this.year,this.weekNumber);
            this.tcc.setVisible(true);
        }
        else
            return;
    }//GEN-LAST:event_bCommentActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(this.tcc!=null||this.tcc.isShowing())
            this.tcc.dispose();
        if(this.expEntry.isShowing())
            this.expEntry.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void bSunExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSunExpActionPerformed
        if(!this.expEntry.isShowing()){
            this.expEntry.setExpenses(Integer.parseInt(ID.getText()), 1);
            this.expEntry.setVisible(true);
        }
        else
            return;
    }//GEN-LAST:event_bSunExpActionPerformed

    private void bMonExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bMonExpActionPerformed
        if(!this.expEntry.isShowing()){
            this.expEntry.setExpenses(Integer.parseInt(ID.getText()), 2);
            this.expEntry.setVisible(true);
        }
        else
            return;
    }//GEN-LAST:event_bMonExpActionPerformed

    private void bTueExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTueExpActionPerformed
        if(!this.expEntry.isShowing()){
            this.expEntry.setExpenses(Integer.parseInt(ID.getText()), 3);
            this.expEntry.setVisible(true);
        }
        else
            return;
    }//GEN-LAST:event_bTueExpActionPerformed

    private void bWedExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bWedExpActionPerformed
        if(!this.expEntry.isShowing()){
            this.expEntry.setExpenses(Integer.parseInt(ID.getText()), 4);
            this.expEntry.setVisible(true);
        }
        else
            return;
    }//GEN-LAST:event_bWedExpActionPerformed

    private void bThuExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bThuExpActionPerformed
        if(!this.expEntry.isShowing()){
            this.expEntry.setExpenses(Integer.parseInt(ID.getText()), 5);
            this.expEntry.setVisible(true);
        }
        else
            return;
    }//GEN-LAST:event_bThuExpActionPerformed

    private void bFriExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFriExpActionPerformed
        if(!this.expEntry.isShowing()){
            this.expEntry.setExpenses(Integer.parseInt(ID.getText()), 6);
            this.expEntry.setVisible(true);
        }
        else
            return;
    }//GEN-LAST:event_bFriExpActionPerformed

    private void bSatExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSatExpActionPerformed
        if(!this.expEntry.isShowing()){
            this.expEntry.setExpenses(Integer.parseInt(ID.getText()), 7);
            this.expEntry.setVisible(true);
        }
        else
            return;
    }//GEN-LAST:event_bSatExpActionPerformed

    private void keyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyTyped
        formChanged = true;
    }//GEN-LAST:event_keyTyped

    private void tbChanged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbChanged
        formChanged = true;
    }//GEN-LAST:event_tbChanged

    private void mouseChange(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseChange
        formChanged = true;
    }//GEN-LAST:event_mouseChange


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ID;
    private javax.swing.JButton bComment;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bExit;
    private javax.swing.JButton bFriExp;
    private javax.swing.JButton bInsert;
    private javax.swing.JButton bMonExp;
    private javax.swing.JButton bNextLine;
    private javax.swing.JButton bPrevLine;
    private javax.swing.JButton bSatExp;
    private javax.swing.JButton bSave;
    private javax.swing.JButton bSunExp;
    private javax.swing.JButton bThuExp;
    private javax.swing.JButton bTueExp;
    private javax.swing.JButton bWedExp;
    private javax.swing.JComboBox cbJobs;
    private javax.swing.JComboBox cbLaborType;
    private javax.swing.JLabel lComments;
    private javax.swing.JLabel lCurPos;
    private javax.swing.JLabel lCurrLine;
    private javax.swing.JLabel lFri;
    private javax.swing.JLabel lHrs;
    private javax.swing.JLabel lJobNum;
    private javax.swing.JLabel lLaborType;
    private javax.swing.JLabel lLineTotal;
    private javax.swing.JLabel lMon;
    private javax.swing.JLabel lPosition;
    private javax.swing.JLabel lSat;
    private javax.swing.JLabel lSun;
    private javax.swing.JLabel lTCTot;
    private javax.swing.JLabel lTCTotalHrs;
    private javax.swing.JLabel lTaskID;
    private javax.swing.JLabel lThu;
    private javax.swing.JLabel lTotHrs;
    private javax.swing.JLabel lTotLines;
    private javax.swing.JLabel lTue;
    private javax.swing.JLabel lWed;
    private javax.swing.JTextField tbFriCom;
    private javax.swing.JTextField tbFriHrs;
    private javax.swing.JTextField tbMonCom;
    private javax.swing.JTextField tbMonHrs;
    private javax.swing.JTextField tbSatCom;
    private javax.swing.JTextField tbSatHrs;
    private javax.swing.JTextField tbSunCom;
    private javax.swing.JTextField tbSunHrs;
    private javax.swing.JTextField tbTaskID;
    private javax.swing.JTextField tbThuCom;
    private javax.swing.JTextField tbThuHrs;
    private javax.swing.JTextField tbTueCom;
    private javax.swing.JTextField tbTueHrs;
    private javax.swing.JTextField tbWedCom;
    private javax.swing.JTextField tbWedHrs;
    // End of variables declaration//GEN-END:variables

private void setDays(){
    Calendar working = Calendar.getInstance();
    int location;
    int offset;

    //Set TC Tile Week Number
    this.setTitle("Time Card Form for Week Number " + Integer.toString(this.weekNumber)
                + "-" + Integer.toString(this.year));

    working.set(Calendar.YEAR, this.year);
    working.set(Calendar.WEEK_OF_YEAR, this.weekNumber);
    DateFormat dateFormat = new SimpleDateFormat("EEE MMM dd");

    location=working.get(Calendar.DAY_OF_WEEK);
    switch(location)
    {
       case 1: offset=0;
       break;
       case 2: offset=1;
       break;
       case 3: offset=2;
       break;
       case 4: offset=3;
       break;
       case 5: offset=4;
       break;
       case 6: offset=5;
       break;
       case 7: offset=6;
       break;
       default: offset=7;
    }

    working.add(Calendar.DATE,-offset);

    this.lSun.setText(dateFormat.format(working.getTime()));
    working.add(Calendar.DATE, +1);
    this.lMon.setText(dateFormat.format(working.getTime()));
    working.add(Calendar.DATE, +1);
    this.lTue.setText(dateFormat.format(working.getTime()));
    working.add(Calendar.DATE, +1);
    this.lWed.setText(dateFormat.format(working.getTime()));
    working.add(Calendar.DATE, +1);
    this.lThu.setText(dateFormat.format(working.getTime()));
    working.add(Calendar.DATE, +1);
    this.lFri.setText(dateFormat.format(working.getTime()));
    working.add(Calendar.DATE, +1);
    this.lSat.setText(dateFormat.format(working.getTime()));
    working.add(Calendar.DATE, +1);

}
private void populateFormData(int move){
    DataConnection dc = new DataConnection();
    ResultSet rs = null;
    Double lineTotal = 0.0;
    Double temp = 0.0;
    int counter;

    dc.connect();
    try{
        if((move >0  && this.rowPosition<this.maxRows)||(move<0 && !onNewForm)){
            String query = "SELECT * FROM TimeData WHERE ID = " + recordID[(rowPosition-1)+move];
            rs = dc.dbQuery(query);

            if(rs.next())
            {
                 this.ID.setText(Integer.toString(rs.getInt(1)));
                 this.cbJobs.setSelectedIndex(setJobIndex(rs.getString(4)));
                 this.tbTaskID.setText(rs.getString("Task_ID"));
                 this.cbLaborType.setSelectedIndex(setLaborIndex(rs.getString(6)));
                 for(counter=0;counter<13;)
                 {
                    temp = rs.getDouble(counter+7);
                    lineTotal+=temp;
                    if(temp==0)
                        hrsCom[counter].setText("");
                    else
                        hrsCom[counter].setText(Double.toString(temp));
                    counter++;
                    hrsCom[counter].setText(rs.getString(counter+7));
                    counter++;
                 }

                 this.lTotHrs.setText(Double.toString(lineTotal));
                 this.rowPosition+=move;
                 this.lCurPos.setText((Integer.toString(this.rowPosition)));
                 if(this.rowPosition > 1)
                     this.bPrevLine.setEnabled(true);
                 else
                     this.bPrevLine.setEnabled(false);

                 if(this.rowPosition < this.maxRows)
                     this.bNextLine.setEnabled(true);
                 else
                     this.bNextLine.setEnabled(false);
            }
        }
    }catch (Exception e)
    {
        connectionErr(e);        
    }

    dc.closeConnection();

}

private void connectionErr(Exception e){
    JOptionPane.showMessageDialog(this, "TimeCard Form Error has occured:" + e);
}

private int setLaborIndex(String type){
    int index;

    if(type.contentEquals("EESD Labor"))
        index = 0;
    else if(type.contentEquals("EESD Time and Half"))
        index = 1;
    else if(type.contentEquals("EESD Double Time"))
        index = 2;
    else if(type.contentEquals("EESD Unassigned"))
        index = 3;
    else if(type.contentEquals("EESD Unapplied"))
        index = 4;
    else if(type.contentEquals("EESD Authorized"))
        index = 5;
    else if(type.contentEquals("EESD Holiday"))
        index = 6;
    else if(type.contentEquals("EESD Vacation"))
        index = 7;
    else if(type.contentEquals("EESD Safety"))
        index = 8;
    else if(type.contentEquals("EESD Training"))
        index = 9;
    else if(type.contentEquals("EESD Marketing"))
        index = 10;
    else if(type.contentEquals("EESD Sick"))
        index = 11;
    else if(type.contentEquals("EESD CONC"))
        index = 12;
    else
        index = 0;

    return index;
}

private String getLaborIndex(int index){
    String laborType;

    switch(index){
        case 0:
            laborType = "EESD Labor";
            break;
        case 1:
            laborType = "EESD Time and Half";
            break;
        case 2:
            laborType = "EESD Double Time";
            break;
        case 3:
            laborType = "EESD Unassigned";
            break;
        case 4:
            laborType = "EESD Unapplied";
            break;
        case 5:
            laborType = "EESD Authorized";
            break;
        case 6:
            laborType = "EESD Holiday";
            break;
        case 7:
            laborType = "EESD Vacation";
            break;
        case 8:
            laborType = "EESD Safety";
            break;
        case 9:
            laborType = "EESD Training";
            break;
        case 10:
            laborType = "EESD Marketing";
            break;
        case 11:
            laborType = "EESD Sick";
            break;
        case 12:
            laborType = "EESD CONC";
            break;
        default:
            laborType = "";
            break;
    }

    return laborType;
}

private void getTotals(){
       DataConnection dc = new DataConnection();
       ResultSet temp1;
       getJobs();
       this.maxRows=0;
       this.tcTotal=0.0;
       this.rowPosition=0;

       this.bPrevLine.setEnabled(false);
       dc.connect();
       try{
           temp1 = dc.getWeekData(this.year,this.weekNumber);
           if(temp1 != null){
               while(temp1.next()){
                    this.maxRows++;
                    this.tcTotal+=(temp1.getDouble(7)+temp1.getDouble(9)+temp1.getDouble(11)+
                            temp1.getDouble(13)+temp1.getDouble(15)+temp1.getDouble(17)+temp1.getDouble(19));
               }
               if(this.maxRows==0){
                   this.onNewForm = true;
               }else
                   this.onNewForm = false;
           }
           if(this.maxRows>1)
               this.bNextLine.setEnabled(true);
           temp1.close();
           
       }
        catch (Exception e) {
            connectionErr(e);
            this.maxRows = 0;
       }

       this.lTotLines.setText(Integer.toString(this.maxRows));
       this.lCurPos.setText(Integer.toString(this.rowPosition));
       this.lTCTotalHrs.setText(Double.toString(this.tcTotal));
       

}

    @SuppressWarnings("unchecked")
    private void getJobs(){
    ResultSet jobs;
    DataConnection dc = new DataConnection();
    String temp;
    boolean newJob;
    int ctr;

    //CLEAR JOB COMBO BOX
    this.cbJobs.removeAllItems();

    dc.connect();
    jobs = dc.getJobList(this.year,this.weekNumber);

    try{
        while(jobs.next())
        {
            newJob = true;
            temp = jobs.getString(1);
            ctr = this.cbJobs.getModel().getSize();

            if(ctr>0){
                //CHECK IF ALREADY ON LIST BEFORE ADDING
                for(int i=0;i<ctr;i++){
                    if(temp.equalsIgnoreCase(getJobText(i)))
                        newJob = false;
                }
            }
            if(newJob){
                this.cbJobs.addItem(this.u.makeObj(temp));
            }
        }


    }
        catch (Exception e) {
        connectionErr(e);
    }
    dc.closeConnection();



}

private String getJobText(int index){
    String job;

    if(index>=0&&index<this.cbJobs.getModel().getSize())
        job = this.cbJobs.getItemAt(index).toString();
    else if (index == -1){
        if(this.cbJobs.getSelectedItem()==null)
            job = "";
        else
            job = this.cbJobs.getSelectedItem().toString().toUpperCase();
    }else
        job = "";
        

    return job;
}

private String formEntryValid(){
     String errors;
     int counter;
     errors = "";

     //clear previous validation markers
     this.cbJobs.setBackground(Color.white);
     this.tbTaskID.setBackground(Color.white);
     this.cbLaborType.setBackground(Color.white);
     for(counter=0;counter<=13;counter++)
     {
         hrsCom[counter].setBackground(Color.white);

     }
     /*
     this.tbSunHrs.setBackground(Color.white);
     this.tbSunCom.setBackground(Color.white);
     this.tbMonHrs.setBackground(Color.white);
     this.tbMonCom.setBackground(Color.white);
     this.tbTueHrs.setBackground(Color.white);
     this.tbTueCom.setBackground(Color.white);
     this.tbWedHrs.setBackground(Color.white);
     this.tbWedCom.setBackground(Color.white);
     this.tbThuHrs.setBackground(Color.white);
     this.tbThuCom.setBackground(Color.white);
     this.tbFriHrs.setBackground(Color.white);
     this.tbFriCom.setBackground(Color.white);
     this.tbSatHrs.setBackground(Color.white);
     this.tbSatCom.setBackground(Color.white);
     */

     if(getJobText(this.cbJobs.getSelectedIndex()).length() <= 0){
         errors+= "Must enter Job Number \n";
         this.cbJobs.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.cbJobs.getSelectedItem().toString())){
         errors+= "Job Number must not contain commas\n";
         this.cbJobs.setBackground(Color.red);
     }


     if(this.tbTaskID.getText().isEmpty()){
         errors+= "Must enter Task ID \n";
         this.tbTaskID.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.tbTaskID.getText())){
         errors+= "Task ID must not contain commas\n";
         this.tbTaskID.setBackground(Color.red);
     }

     if(this.cbLaborType.getSelectedIndex()<0){
         errors+= "Invalid Labor Type Selection \n";
         this.cbLaborType.setBackground(Color.red);
     }
     else if(getLaborIndex(this.cbLaborType.getSelectedIndex()).length() <= 0){
         errors+= "Invalid Labor Type selection \n";
         this.cbLaborType.setBackground(Color.red);
     }

     //Check hours
     if(!this.tbSunHrs.getText().isEmpty())
     {
         try{
            Float.parseFloat(this.tbSunHrs.getText());

         }catch(NumberFormatException e)
         {
            errors+= "Sunday Hours Invalid\n";
            this.tbSunHrs.setBackground(Color.red);       
         }
     }
     if(!this.tbMonHrs.getText().isEmpty())
     {
         try{
            Float.parseFloat(this.tbMonHrs.getText());

         }catch(NumberFormatException e)
         {
            errors+= "Monday Hours Invalid\n";
            this.tbMonHrs.setBackground(Color.red);
         }
     }
     if(!this.tbTueHrs.getText().isEmpty())
     {
         try{
            Float.parseFloat(this.tbTueHrs.getText());

         }catch(NumberFormatException e)
         {
            errors+= "Tuesday Hours Invalid\n";
            this.tbTueHrs.setBackground(Color.red);
         }
     }
     if(!this.tbWedHrs.getText().isEmpty())
     {
         try{
            Float.parseFloat(this.tbWedHrs.getText());

         }catch(NumberFormatException e)
         {
            errors+= "Wednesday Hours Invalid\n";
            this.tbWedHrs.setBackground(Color.red);
         }
     }
     if(!this.tbThuHrs.getText().isEmpty())
     {
         try{
            Float.parseFloat(this.tbThuHrs.getText());

         }catch(NumberFormatException e)
         {
            errors+= "Thursday Hours Invalid\n";
            this.tbThuHrs.setBackground(Color.red);
         }
     }
     if(!this.tbFriHrs.getText().isEmpty())
     {
         try{
            Float.parseFloat(this.tbFriHrs.getText());

         }catch(NumberFormatException e)
         {
            errors+= "Friday Hours Invalid\n";
            this.tbSunHrs.setBackground(Color.red);
         }
     }
     if(!this.tbSatHrs.getText().isEmpty())
     {
         try{
            Float.parseFloat(this.tbSatHrs.getText());

         }catch(NumberFormatException e)
         {
            errors+= "Saturday Hours Invalid\n";
            this.tbSatHrs.setBackground(Color.red);
         }
     }
     //Check day comment fields
     if(this.tbSunCom.getText().length()>100){
         errors+= "Please limit line comment to a maximum of 100 characters\n";
         this.tbSunCom.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.tbSunCom.getText())){
         errors+= "No Commas allowed in Sunday comment field";
         this.tbSunCom.setBackground(Color.red);
     }

     if(this.tbMonCom.getText().length()>100){
         errors+= "Please limit line comment to a maximum of 100 characters\n";
         this.tbMonCom.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.tbMonCom.getText())){
         errors+= "No Commas allowed in Monday comment field";
         this.tbMonCom.setBackground(Color.red);
     }

     if(this.tbTueCom.getText().length()>100){
         errors+= "Please limit line comment to a maximum of 100 characters\n";
         this.tbTueCom.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.tbTueCom.getText())){
         errors+= "No Commas allowed in Tuesday comment field";
         this.tbTueCom.setBackground(Color.red);
     }

     if(this.tbWedCom.getText().length()>100){
         errors+= "Please limit line comment to a maximum of 100 characters\n";
         this.tbWedCom.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.tbWedCom.getText())){
         errors+= "No Commas allowed in Wednesday comment field";
         this.tbWedCom.setBackground(Color.red);
     }

     if(this.tbThuCom.getText().length()>100){
         errors+= "Please limit line comment to a maximum of 100 characters\n";
         this.tbThuCom.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.tbThuCom.getText())){
         errors+= "No Commas allowed in Thursday comment field";
         this.tbThuCom.setBackground(Color.red);
     }

     if(this.tbFriCom.getText().length()>100){
         errors+= "Please limit line comment to a maximum of 100 characters\n";
         this.tbFriCom.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.tbFriCom.getText())){
         errors+= "No Commas allowed in Friday comment field";
         this.tbFriCom.setBackground(Color.red);
     }

     if(this.tbSatCom.getText().length()>100){
         errors+= "Please limit line comment to a maximum of 100 characters\n";
         this.tbSatCom.setBackground(Color.red);
     }else if(this.u.checkForCommas(this.tbSatCom.getText())){
         errors+= "No Commas allowed in Saturday comment field";
         this.tbSatCom.setBackground(Color.red);
     }

     if(errors.length()>0)
        JOptionPane.showMessageDialog(this, "Time Card Form Error has occured. \n" + errors);

     return errors;


}

private void clearFields(){
    this.cbJobs.setSelectedIndex(-1);
    this.tbTaskID.setText(null);
    this.cbLaborType.setSelectedIndex(0);
    this.tbSunHrs.setText(null);
    this.tbSunCom.setText(null);
    this.tbMonCom.setText(null);
    this.tbMonHrs.setText(null);
    this.tbTueCom.setText(null);
    this.tbTueHrs.setText(null);
    this.tbWedCom.setText(null);
    this.tbWedHrs.setText(null);
    this.tbThuCom.setText(null);
    this.tbThuHrs.setText(null);
    this.tbFriCom.setText(null);
    this.tbFriHrs.setText(null);
    this.tbSatCom.setText(null);
    this.tbSatHrs.setText(null);
}

private void resetForm(){
    clearFields();
    getRecords();
    getTotals();
    if(onNewForm)
        newTimeCard();
    else
    {
        while((this.rowPosition<this.lastPosition)&&(this.rowPosition<this.maxRows)||(rowPosition==0&&maxRows>0))
            populateFormData(1);
    }

}

private boolean saveForm(){
    Double[] hrs = new Double[7];
    String[] com = new String[10];
    Integer[] data = new Integer[3];
    DataConnection dc = new DataConnection();
    boolean sucess = false;

    if(formEntryValid().length()!=0)
         return sucess;

    dc.connect();
    this.bExit.setText("Exit");
    this.bDelete.setEnabled(true);
    this.bInsert.setEnabled(true);

    //set location to go back to after save.
    //if new time card, will advance to first row.
    //otherwise will go back to the row that was saved.
    if(this.onNewForm&&this.maxRows==0)
        this.lastPosition=1;
    else
        this.lastPosition = this.rowPosition;

    try{

        data[0] = this.year;
        data[1] = this.weekNumber;
        com[0] = this.cbJobs.getSelectedItem().toString().toUpperCase();
        com[1] = this.u.validateCom(this.tbTaskID.getText());
        com[2] = getLaborIndex(this.cbLaborType.getSelectedIndex());
        hrs[0] = this.u.validateHrs(this.tbSunHrs.getText());
        com[3] = this.u.validateCom(this.tbSunCom.getText());
        hrs[1] = this.u.validateHrs(this.tbMonHrs.getText());
        com[4] = this.u.validateCom(this.tbMonCom.getText());
        hrs[2] = this.u.validateHrs(this.tbTueHrs.getText());
        com[5] = this.u.validateCom(this.tbTueCom.getText());
        hrs[3] = this.u.validateHrs(this.tbWedHrs.getText());
        com[6] = this.u.validateCom(this.tbWedCom.getText());
        hrs[4] = this.u.validateHrs(this.tbThuHrs.getText());
        com[7] = this.u.validateCom(this.tbThuCom.getText());
        hrs[5] = this.u.validateHrs(this.tbFriHrs.getText());
        com[8] = this.u.validateCom(this.tbFriCom.getText());
        hrs[6] = this.u.validateHrs(this.tbSatHrs.getText());
        com[9] = this.u.validateCom(this.tbSatCom.getText());

        if(!this.onNewForm)
            data[2] = Integer.parseInt(this.ID.getText());

        dc.setWeekData(data, hrs, com, this.onNewForm);
        

        //UPDATE OT DATABASE
        this.u.updateOTdb(this.year, this.weekNumber);

        //UPDATE EXPENSE (JOB OR TASK ID CHANGE)
        if(!onNewForm)
            dc.updateExpJobInfo(Integer.parseInt(this.ID.getText()), com[0], com[1]);

        this.onNewForm = false;
        sucess = true;
        formChanged = false;
       }
       catch (Exception e) {
            connectionErr(e);
            sucess = false;
       }
    dc.closeConnection();
    return sucess;

}

private int setJobIndex(String jobNumber){

    int jobCount;
    int counter;
    boolean found = false;

    jobCount = this.cbJobs.getItemCount();

    for(counter=0;counter<=jobCount;counter++){
        String tmp = getJobText(counter);
        if(jobNumber.equalsIgnoreCase(tmp))
        {
            found = true;
            break;
        }
    }

    if(found)
        return counter;
    else
    {
        this.cbJobs.insertItemAt(jobNumber,0);
        return 0;
    }

}

private void getRecords(){
    DataConnection dc = new DataConnection();
    ResultSet rs = null;
    String query = "SELECT ID FROM TimeData WHERE (" +
            "Year = " + Integer.toString(year) + " AND " +
            "Week_Number = " + Integer.toString(weekNumber) + " ) " +
            "ORDER BY ID ASC";
    int counter = 0;

    dc.connect();
    this.recordID = new Integer[dc.getRecordCount(year, weekNumber)];
    rs = dc.dbQuery(query);
    try{
        while(rs.next()){
            recordID[counter++] = rs.getInt(1);
        }

    }catch (Exception e)
    {
        connectionErr(e);
    }


}

}




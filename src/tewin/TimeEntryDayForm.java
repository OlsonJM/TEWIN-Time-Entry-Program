/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimeEntryDayForm.java
 *
 * Created on Nov 26, 2009, 8:54:57 AM
 */

package tewin;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.Calendar;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
//import java.awt.MouseInfo;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

/**
 *
 * @author James Olson
 */
public class TimeEntryDayForm extends javax.swing.JFrame{

    private DataConnection dc;
    private int year;
    private int week;
    private int day;
    private ResultSet rs;
    private int lineCount;
    private DefaultTableModel model;
    private String[] columnNames;
    private double totalHours;
    private JTable tblDayEntries;
    private JComboBox <String> laborType;
    private JComboBox <String> jobList;
    private DefaultCellEditor laborEditor;
    private DefaultCellEditor jobEditor;
    private JPopupMenu pmProject;
    private JMenuItem miProject;
    private Utilities u;
    private ProjectReport pr;
    private ArrayList<String[]> customers;
    private boolean newProject;
    private boolean existingCustomer;
    private Object[] jobDetails;


    /** Creates new form TimeEntryDayForm */
    public TimeEntryDayForm(int year, int week, int day) {
        initComponents();
        this.year = year;
        this.week = week;
        this.day = day;
        this.totalHours = 0.0f;
        this.tblDayEntries = new JTable();
        this.u = new Utilities();
        customers = new ArrayList<String[]>();
        jobDetails = new Object[7];
        getTableValues();
        setSummaryLabel();
        initPopupProjMenu();
        
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dProject = new javax.swing.JDialog();
        lProjectNum = new javax.swing.JLabel();
        cbCustomer = new javax.swing.JComboBox();
        lCust = new javax.swing.JLabel();
        cbCity = new javax.swing.JComboBox();
        lCIty = new javax.swing.JLabel();
        cbState = new javax.swing.JComboBox();
        lState = new javax.swing.JLabel();
        cbDistributer = new javax.swing.JComboBox();
        lDistributer = new javax.swing.JLabel();
        bJobSave = new javax.swing.JButton();
        bJobCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        tbJobNumber = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lID = new javax.swing.JLabel();
        lSummary = new javax.swing.JLabel();
        bExit = new javax.swing.JButton();
        bAddLine = new javax.swing.JButton();
        bSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lTotalHours = new javax.swing.JLabel();
        pTablePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        bProjReport = new javax.swing.JButton();

        dProject.setTitle("Project Details");
        dProject.setAlwaysOnTop(true);
        dProject.setName("ProjectData"); // NOI18N
        dProject.setResizable(false);

        lProjectNum.setText("PROJECTCODE");

        cbCustomer.setEditable(true);
        cbCustomer.setToolTipText("Select/Enter Customer Name");
        cbCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCustomerActionPerformed(evt);
            }
        });

        lCust.setText("Customer");

        cbCity.setEditable(true);

        lCIty.setText("City");

        cbState.setEditable(true);

        lState.setText("State");

        cbDistributer.setEditable(true);

        lDistributer.setText("Distributer");

        bJobSave.setText("Save");
        bJobSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bJobSaveActionPerformed(evt);
            }
        });

        bJobCancel.setText("Cancel");
        bJobCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bJobCancelActionPerformed(evt);
            }
        });

        jLabel3.setText("Job Number");

        tbJobNumber.setToolTipText("Enter Local Job Number");

        jLabel4.setText("PROJECT");

        javax.swing.GroupLayout dProjectLayout = new javax.swing.GroupLayout(dProject.getContentPane());
        dProject.getContentPane().setLayout(dProjectLayout);
        dProjectLayout.setHorizontalGroup(
            dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dProjectLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(bJobSave, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(bJobCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63))
                    .addGroup(dProjectLayout.createSequentialGroup()
                        .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(lDistributer)
                            .addComponent(lState)
                            .addComponent(lCIty)
                            .addComponent(lCust)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(dProjectLayout.createSequentialGroup()
                                .addComponent(lProjectNum, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(cbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tbJobNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbState, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbDistributer, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dProjectLayout.setVerticalGroup(
            dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dProjectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lProjectNum)
                    .addComponent(jLabel4)
                    .addComponent(lID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tbJobNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCust)
                    .addComponent(cbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lCIty)
                    .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lState)
                    .addComponent(cbState, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lDistributer)
                    .addComponent(cbDistributer, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bJobSave)
                    .addComponent(bJobCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        dProject.getAccessibleContext().setAccessibleParent(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Time Entry Day Form");
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setResizable(false);

        lSummary.setFont(new java.awt.Font("Tahoma", 1, 14));
        lSummary.setText("Time Card Date");

        bExit.setText("Close");
        bExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExitActionPerformed(evt);
            }
        });

        bAddLine.setText("Add Line");
        bAddLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddLineActionPerformed(evt);
            }
        });

        bSave.setText("Save Table");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Hours:");

        lTotalHours.setText("jLabel2");

        pTablePanel.setAutoscrolls(true);

        javax.swing.GroupLayout pTablePanelLayout = new javax.swing.GroupLayout(pTablePanel);
        pTablePanel.setLayout(pTablePanelLayout);
        pTablePanelLayout.setHorizontalGroup(
            pTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 794, Short.MAX_VALUE)
        );
        pTablePanelLayout.setVerticalGroup(
            pTablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 167, Short.MAX_VALUE)
        );

        jLabel2.setText("NOTE:  Changes to Job Number, Task ID, or Labor Type will affect all entries on that line for the entire week.");

        bProjReport.setText("Project Report");
        bProjReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProjReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(lTotalHours, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104)
                                .addComponent(bProjReport, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                                .addComponent(bAddLine)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bSave, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bExit))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lSummary))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(lSummary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bExit)
                    .addComponent(bSave)
                    .addComponent(jLabel1)
                    .addComponent(lTotalHours)
                    .addComponent(bAddLine)
                    .addComponent(bProjReport))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_bExitActionPerformed

    private void initPopupProjMenu()
    {
        tblDayEntries.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                projectMouseClick(evt);
            }
        });
        pmProject = new javax.swing.JPopupMenu();
        pmProject.setDoubleBuffered(true);
        pmProject.setInvoker(this);
        miProject = new JMenuItem();
        miProject.setText("");
        miProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miProjectActionPerformed(evt);
            }
        });
    }

    private void miProjectActionPerformed(java.awt.event.ActionEvent evt)
    {
        DataConnection dc1 = new DataConnection();
        dc1.connect();
        this.customers = dc1.getCustomerList();
        dc1.closeConnection();
        this.cbCustomer.setModel(u.makeCustomerCombo(this.customers));
        this.cbState.setModel(u.makeStateCombo());
        this.cbCity.setModel(u.makeCityCombo());
        this.cbDistributer.setModel(u.makeDistCombo());
        if(!newProject)
        {
                   this.tbJobNumber.setText(jobDetails[2].toString());
                   this.cbCustomer.setSelectedItem(jobDetails[3].toString());// + " " + jobDetails[4].toString() +
                    //       ", " + jobDetails[5].toString());
                   this.cbCity.setSelectedItem(jobDetails[4]);
                   this.cbCity.setEnabled(false);
                   this.cbState.setSelectedItem(jobDetails[5]);
                   this.cbState.setEnabled(false);
                   this.cbDistributer.setSelectedItem(jobDetails[6]);
                   this.existingCustomer = true;
        }
        this.dProject.setVisible(true);
        this.dProject.setSize(dProject.getPreferredSize());

    }

    private void bAddLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddLineActionPerformed
        this.model.addRow(new Object[]{"","","","","","Add/Update",""});
        this.tblDayEntries.repaint();
        this.pack();
    }//GEN-LAST:event_bAddLineActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        //Save all lines in the table
        if(!validateEntries()){
            JOptionPane.showMessageDialog(this, "Form not valid. Check for commas in fields ");
            return;
        }

        int counter = 0;
        int rowCount = this.model.getRowCount();
        String data[] = new String[4];
        String unsavedData="";
        Double hours;
        this.dc.connect();
        try{
            while(counter<rowCount)
            {

                //check if row contains minimum data
                data[0] = this.model.getValueAt(counter,0).toString().toUpperCase();
                data[1] = this.model.getValueAt(counter,1).toString();
                data[2] = this.model.getValueAt(counter,2).toString();
                String tempHrs = this.model.getValueAt(counter,3).toString();

                //skip lines with blank job number, task ID, labor type, and hours
                if(data[0].isEmpty()||data[1].isEmpty()||data[2].isEmpty()||tempHrs.length()==0){
                    unsavedData+="Row " + Integer.toString(counter+1) + " not saved \n";
                    counter++;
                    continue;
                }
                
                
                hours = this.u.validateHrs(this.model.getValueAt(counter,3).toString());
                data[3] = this.u.validateCom(this.model.getValueAt(counter,4).toString());

                String ID = this.model.getValueAt(counter, 6).toString();
                if(ID.length()==0)
                    this.dc.saveDayChange(0,this.year,this.week,this.day,data, hours);
                else{
                    this.dc.saveDayChange(Integer.parseInt(this.model.getValueAt(counter, 6).toString()),
                        this.year,this.week,this.day,data, hours);
                    this.dc.updateExpJobInfo(Integer.parseInt(this.model.getValueAt(counter, 6).toString()), data[0], data[1]);
                }
                counter++;
            }


        }
        catch(Exception e)
        {
            System.out.println(e);
        }

        this.dc.closeConnection();

        if(unsavedData.length()>0){
            unsavedData += "Check for vaild entries in data fields\n"+
                    "Job Number, Task ID, Labor Type, and Hours field must\n" +
                    "be populated to save a line. Fields must not contain commas.";
            JOptionPane.showMessageDialog(this, unsavedData);
        }else
        {
            //update OT DB and reload page
            this.u.updateOTdb(this.year, this.week);
            getTableValues();
        }

        

    }//GEN-LAST:event_bSaveActionPerformed

    private void bProjReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProjReportActionPerformed
        int row = this.tblDayEntries.getSelectedRow();
        
        if(row<0)
        {
            JOptionPane.showMessageDialog(this, "A Row must first be selected");
        }else
        {
            String jobNumber = this.model.getValueAt(row, 0).toString();
            if(this.pr == null||!this.pr.isShowing()){
                this.pr = new ProjectReport(jobNumber);
                this.pr.setVisible(true);
            }
            else
                return;

        }
    }//GEN-LAST:event_bProjReportActionPerformed

    private void bJobCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bJobCancelActionPerformed
        dProject.dispose();
    }//GEN-LAST:event_bJobCancelActionPerformed

    private void cbCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCustomerActionPerformed
        Integer index = cbCustomer.getSelectedIndex();
        if(index>=0)
        {
            String[] line = customers.get(index);
            this.cbCity.setSelectedItem(line[2]);
            this.cbCity.setEnabled(false);
            this.cbState.setSelectedItem(line[3]);
            this.cbState.setEnabled(false);
            existingCustomer = true;

        }else
        {
            this.cbCity.setEnabled(true);
            this.cbState.setEnabled(true);
            existingCustomer = false;
        }
    }//GEN-LAST:event_cbCustomerActionPerformed

    private void bJobSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bJobSaveActionPerformed
        //Save customer data to new job #
        //LocalJob, Project, Customer, Distributer, City, State
        DataConnection dc1 = new DataConnection();
        dc1.connect();

        String[] project = new String[6];
        project[1] = this.lProjectNum.getText();
        project[0] = this.tbJobNumber.getText();
        int idx = cbCustomer.getSelectedIndex();

        //if(!existingCustomer)
            project[2] = this.cbCustomer.getSelectedItem().toString();
       // else
       // {
        //    String[] temp = this.customers.get(this.cbCustomer.getSelectedIndex());
        //    project[2] = temp[1];
        //}
        project[3] = this.cbDistributer.getSelectedItem().toString();
        project[4] = this.cbCity.getSelectedItem().toString();
        project[5] = this.cbState.getSelectedItem().toString();

        if(newProject)
        {
            dc1.addProject(project);
        }
        else
            dc1.updateProject((Integer)this.jobDetails[1],project);
        
        if(!existingCustomer)
            dc1.addCustomer(project);
        
        dc1.addDistributer(project[3]);
        dc1.addCity(project[4],project[5]);
        bJobCancel.setText("Done");
        dc1.closeConnection();
    }//GEN-LAST:event_bJobSaveActionPerformed

    private void projectMouseClick(java.awt.event.MouseEvent evt)
    {
        if (evt.getButton() == MouseEvent.BUTTON3) {
           int column = tblDayEntries.columnAtPoint( evt.getPoint() );

           //Column 0 = Project Number Right Click
           if ( column == 0 ) {
               int row = tblDayEntries.rowAtPoint( evt.getPoint() );
               tblDayEntries.changeSelection( row, column, false, false );
               this.pmProject.removeAll();
               this.pmProject.add(new JLabel("Project Data"));
               String check = tblDayEntries.getModel().getValueAt(row, column).toString();
               //do nothing if job number is blank
               if(check.length()==0)
                   return;
               //check if project details exist for this job number
               DataConnection dc1 = new DataConnection();
               dc1.connect();
               jobDetails = dc1.getJobDetails(tblDayEntries.getModel().getValueAt(row, column).toString());
               if((Boolean)jobDetails[0])
               {
                   this.newProject = false;
                   this.existingCustomer = true;
                   pmProject.add(new JLabel("   Job#: " + jobDetails[2].toString()));
                   pmProject.add(new JLabel("   Cust: " + jobDetails[3].toString()));
                   pmProject.add(new JLabel("   Loc : " + jobDetails[4].toString() + ", " +
                           jobDetails[5].toString()));
                   miProject.setText("EDIT JOB DETIALS");
                   this.bJobCancel.setText("Done");
                   this.bJobSave.setText("Update");
               }else
               {
                   miProject.setText("ADD JOB DETIALS");
                   this.newProject = true;
                   this.bJobCancel.setText("Cancel");
                   this.bJobSave.setText("Save");
               }

               dc1.closeConnection();
               this.lProjectNum.setText(tblDayEntries.getModel().getValueAt(row, column).toString());
               pmProject.add(this.miProject);
               pmProject.show( tblDayEntries, evt.getX(), evt.getY());
           }else
            // TASK Right Click
            if (column == 1)
            {
               int row = tblDayEntries.rowAtPoint( evt.getPoint() );
               tblDayEntries.changeSelection( row, column, false, false );

               String check = tblDayEntries.getModel().getValueAt(row, 0).toString();
               //do nothing if job number is blank
               if(check.length()==0)
                   return;

               //get job details
               //DataConnection dc1 = new DataConnection();
               //dc1.connect();
               //TODO:  Get Project ID based on Job Number
               //TODO:  Lookup Task Details based on Project ID
               //TODO:  Create List in new dropdown menu


               //dc1.closeConnection();

            }

        }

    }

    private void getTableValues(){
        this.dc = new DataConnection();
        this.model = new DefaultTableModel();
        this.totalHours=0;
        this.lTotalHours.setText("0.0");
        this.dc.connect();
        //GET RESULT DATA
        try{
            this.rs = this.dc.getWeekData(this.year, this.week);
        }
        catch (Exception e) {
            System.out.println(e);
            this.rs = null;
        }

        //Count # of lines

        this.lineCount=0;
        try{

            if(this.rs != null)
            {
                while(this.rs.next()){
                    this.lineCount++;
                }
          
            }
        }
        catch (Exception e) {
            System.out.println(e);
        }

        //set hour & comment keys based on day
        int comment=8;
        int hours=7;
        switch(this.day){
            case 1:
                hours = 13;
                comment = 3;
                break;
            case 2:
                hours = 14;
                comment = 8;
                break;
            case 3:
                hours = 15;
                comment = 9;
                break;
            case 4:
                hours = 16;
                comment = 4;
                break;
            case 5:
                hours = 17;
                comment = 5;
                break;
            case 6:
                hours = 18;
                comment = 10;
                break;
            case 7:
                hours = 19;
                comment = 11;
                break;
     
            default:
                break;

        }


        double jobHours;
        try{
            setColumnModel();
            if(this.lineCount>0)
            {
                
                this.rs = this.dc.getWeekData(this.year, this.week);
                while(this.rs.next()){
                    jobHours=this.rs.getDouble(hours);
                    this.totalHours+=jobHours;
                    String temp = this.rs.getString(comment);

                    if(temp == null)
                        temp = "";

                    this.model.addRow(new Object[]{this.rs.getString(2),
                        this.rs.getString(1),this.rs.getString(3),jobHours,
                        temp,"Add/Update",this.rs.getInt(7)});
                }
            }
            
            this.model.setRowCount(this.lineCount);
            this.lTotalHours.setText(Double.toString(this.totalHours));
            this.tblDayEntries.setModel(this.model);

            this.pTablePanel.removeAll();
            this.pTablePanel.setVisible(true);
            //Set column Widths
            this.tblDayEntries.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            TableColumn col = this.tblDayEntries.getColumnModel().getColumn(0);
            col.setPreferredWidth(150);
            col.setCellEditor(this.jobEditor);
            col = this.tblDayEntries.getColumnModel().getColumn(1);
            col.setPreferredWidth(55);
            col = this.tblDayEntries.getColumnModel().getColumn(2);
            col.setPreferredWidth(150);
            col.setCellEditor(this.laborEditor);
            col = this.tblDayEntries.getColumnModel().getColumn(3);
            col.setPreferredWidth(50);
            col = this.tblDayEntries.getColumnModel().getColumn(4);
            col.setPreferredWidth(350);
            col = this.tblDayEntries.getColumnModel().getColumn(5);
            col.setPreferredWidth(110);
            col.setCellRenderer(new ButtonRenderer());
            col.setCellEditor(new ButtonEditor(new JCheckBox(),day));
            col = this.tblDayEntries.getColumnModel().getColumn(6);
            col.setPreferredWidth(0);

            //Set table Properties
            this.tblDayEntries.setFillsViewportHeight(true);
            this.tblDayEntries.setCellSelectionEnabled(false);
            this.tblDayEntries.setAutoCreateRowSorter(false);
            this.tblDayEntries.setRowSelectionAllowed(true);
            this.tblDayEntries.setColumnSelectionAllowed(false);
            this.tblDayEntries.getTableHeader().setReorderingAllowed(false);
            this.tblDayEntries.setSize(800, 320);
            this.tblDayEntries.setRowHeight(20);
            this.pTablePanel.add(this.tblDayEntries);
            this.pTablePanel.setLayout(new BorderLayout());
            this.pTablePanel.add(this.tblDayEntries.getTableHeader(), BorderLayout.PAGE_START);
            this.pTablePanel.add(this.tblDayEntries, BorderLayout.CENTER);
            this.pTablePanel.setSize(this.tblDayEntries.getHeight(), this.tblDayEntries.getWidth());
            this.pack();

            
        }
        catch (Exception e) {
            System.out.println(e);
        }

        this.dc.closeConnection();

    }

    private void setSummaryLabel(){
        Calendar now = Calendar.getInstance();

        now.set(Calendar.YEAR,this.year);
        now.set(Calendar.WEEK_OF_YEAR, this.week);
        now.set(Calendar.DAY_OF_WEEK, this.day);
        DateFormat dateFormat = new SimpleDateFormat("EEEE MMMMM dd, yyyy");
        this.lSummary.setText("Time Summary for " + dateFormat.format(now.getTime()));

    }

    private void setColumnModel(){

        this.columnNames = new String[]{"Job Number", "Task ID", "Labor Type",
                "Hours", "Comment","Expense","ID"};
        this.model.setColumnIdentifiers(this.columnNames);
        this.model.setColumnCount(this.columnNames.length);

        //Create Labor type ComboBox
        this.laborType = new JComboBox<String>();
        laborType.addItem("EESD Labor");
        laborType.addItem("EESD Time and Half");
        laborType.addItem("EESD Double Time");
        laborType.addItem("EESD Unassigned");
        laborType.addItem("EESD Unapplied");
        laborType.addItem("EESD Authorized");
        laborType.addItem("EESD Holiday");
        laborType.addItem("EESD Vacation");
        laborType.addItem("EESD Safety");
        laborType.addItem("EESD Training");
        laborType.addItem("EESD Marketing");
        laborType.addItem("EESD Sick");
        laborType.addItem("EESD CONC");

        this.laborEditor = new DefaultCellEditor(this.laborType);

        this.jobList = this.u.makeJobComboBox(year, week);
        this.jobList.setEditable(true);
        this.jobEditor = new DefaultCellEditor(this.jobList);

    }

    private boolean validateEntries(){
        //Check all editable fields for commas
        boolean formValid=true;
        int rowCount = this.model.getRowCount();

        for(int i=0;i<rowCount;i++){
            if(!this.model.getValueAt(i,0).toString().isEmpty())
                formValid = !this.u.checkForCommas(this.model.getValueAt(i, 0).toString());
            if(!formValid)
                break;
            if(!this.model.getValueAt(i,1).toString().isEmpty())
                formValid = !this.u.checkForCommas(this.model.getValueAt(i, 1).toString());
            if(!formValid)
                break;
            if(!this.model.getValueAt(i,2).toString().isEmpty())
                formValid = !this.u.checkForCommas(this.model.getValueAt(i, 2).toString());
            if(!formValid)
                break;
            if(!this.model.getValueAt(i,4).toString().isEmpty())
                formValid = !this.u.checkForCommas(this.model.getValueAt(i, 4).toString());
            if(!formValid)
                break;
        }

        return formValid;

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAddLine;
    private javax.swing.JButton bExit;
    private javax.swing.JButton bJobCancel;
    private javax.swing.JButton bJobSave;
    private javax.swing.JButton bProjReport;
    private javax.swing.JButton bSave;
    private javax.swing.JComboBox cbCity;
    private javax.swing.JComboBox cbCustomer;
    private javax.swing.JComboBox cbDistributer;
    private javax.swing.JComboBox cbState;
    private javax.swing.JDialog dProject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lCIty;
    private javax.swing.JLabel lCust;
    private javax.swing.JLabel lDistributer;
    private javax.swing.JLabel lID;
    private javax.swing.JLabel lProjectNum;
    private javax.swing.JLabel lState;
    private javax.swing.JLabel lSummary;
    private javax.swing.JLabel lTotalHours;
    private javax.swing.JPanel pTablePanel;
    private javax.swing.JTextField tbJobNumber;
    // End of variables declaration//GEN-END:variables


    //Added for button in table
    class ButtonRenderer extends JButton implements TableCellRenderer {

      public ButtonRenderer() {
        setOpaque(true);
      }

      public Component getTableCellRendererComponent(JTable table, Object value,
          boolean isSelected, boolean hasFocus, int row, int column) {
        if (isSelected) {
          setForeground(table.getSelectionForeground());
          setBackground(table.getSelectionBackground());
        } else {
          setForeground(table.getForeground());
          setBackground(UIManager.getColor("Button.background"));
        }
        setText((value == null) ? "" : value.toString());
        return this;
      }
    }


    class ButtonEditor extends DefaultCellEditor {
      protected JButton button;
      private String label;
      private boolean isPushed;
      int tableRow;
      DefaultTableModel model;
      int expDay;

      public ButtonEditor(JCheckBox checkBox, int day) {
        super(checkBox);
        expDay = day;
        button = new JButton();
        model = new DefaultTableModel();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
          public void actionPerformed(ActionEvent e) {
            fireEditingStopped();
          }
        });
      }

        @Override
      public Component getTableCellEditorComponent(JTable table, Object value,
          boolean isSelected, int row, int column) {
          tableRow = row;
          model = (DefaultTableModel)table.getModel();

        if (isSelected) {
          button.setForeground(table.getSelectionForeground());
          button.setBackground(table.getSelectionBackground());
        } else {
          button.setForeground(table.getForeground());
          button.setBackground(table.getBackground());
        }
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isPushed = true;
        return button;
      }

        @Override
      public Object getCellEditorValue() {
        if (isPushed) {
          int ID;

          if(model.getValueAt(tableRow,6).toString() == null || model.getValueAt(tableRow,6).toString().length()==0)
          {
              ID = -1;
          }else
          {
              ID = Integer.parseInt(model.getValueAt(tableRow, 6).toString());
          }

          if(ID <= 0)
          {
              //Table must be saved before adding expenses
              JOptionPane.showMessageDialog(null, "Table must be saved before adding expenses");
          }else
          {
              Expenses exp = new Expenses(ID,expDay);
              exp.setVisible(true);
          }

        }
        isPushed = false;
        return new String(label);
      }

        @Override
      public boolean stopCellEditing() {
        isPushed = false;
        return super.stopCellEditing();
      }

        @Override
      protected void fireEditingStopped() {
        super.fireEditingStopped();
      }

    }
}


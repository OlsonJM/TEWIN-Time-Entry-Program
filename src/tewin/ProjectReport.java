/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProjectReport.java
 *
 * Created on Feb 13, 2010, 1:27:12 PM
 */

package tewin;
import javax.swing.*;
import java.sql.*;
import javax.swing.tree.*;
import java.util.Calendar;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.NumberFormat;
import java.text.DecimalFormat;

/**
 *
 * @author E0051024
 */
public class ProjectReport extends javax.swing.JFrame {

    private String jobNumber;
    private NumberFormat formatter;
    private Double totalST;
    private Double totalTH;
    private Double totalDT;
    private Double expTotal;
    private Double amexTotal;
    private Double proCardTotal;
    private Double cashTotal;
    private Double personalCCTotal;
    private Double otherTotal;

    /** Creates new form ProjectReport */
    public ProjectReport() {
        formatter = new DecimalFormat("#0.00");
        totalST = 0.0;
        totalDT = 0.0;
        totalTH = 0.0;
        expTotal = 0.0;
        getJobNumber();
        initComponents();
        buildTree();
        populateTotals();
    }

    public ProjectReport(String job){
        formatter = new DecimalFormat("#0.00");
        jobNumber = job;
        totalST = 0.0;
        totalDT = 0.0;
        totalTH = 0.0;
        expTotal = 0.0;
        initComponents();
        buildTree();
        populateTotals();
    }

    public void setReportJob(String job){
        jobNumber = job;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        spProjTree = new javax.swing.JScrollPane();
        trJobItems = new javax.swing.JTree();
        spProjRpt = new javax.swing.JScrollPane();
        tpResults = new javax.swing.JTextPane();
        lSTHrs = new javax.swing.JLabel();
        lTHHrs = new javax.swing.JLabel();
        lDTHrs = new javax.swing.JLabel();
        bExit = new javax.swing.JButton();
        lAMEXTotal = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bExportReport = new javax.swing.JButton();
        lCashTotal = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lOtherTotal = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lProCardTotal = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lPersonalCCTotal = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lExpTotal = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("TEWin - Project Report");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
        jLabel1.setText("Project Summary");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel2.setText("Total ST Hours:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel3.setText("Total TH Hours:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel4.setText("Total DT Hours:");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("SSBEBHA1234");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item 1");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Labor");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Expenses");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item 2");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Labor");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Expenses");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Item 3");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Labor");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Expenses");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        trJobItems.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        trJobItems.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                trJobItemsValueChanged(evt);
            }
        });
        spProjTree.setViewportView(trJobItems);

        tpResults.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        spProjRpt.setViewportView(tpResults);

        lSTHrs.setFont(new java.awt.Font("Tahoma", 1, 12));
        lSTHrs.setText("000.0");

        lTHHrs.setFont(new java.awt.Font("Tahoma", 1, 12));
        lTHHrs.setText("000.0");

        lDTHrs.setFont(new java.awt.Font("Tahoma", 1, 12));
        lDTHrs.setText("000.0");

        bExit.setText("Close");
        bExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExitActionPerformed(evt);
            }
        });

        lAMEXTotal.setFont(new java.awt.Font("Tahoma", 1, 12));
        lAMEXTotal.setText("$ 00000.0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel5.setText("AMEX Total:");

        bExportReport.setText("Export Report");
        bExportReport.setToolTipText("Export Formatted XML for Excel SS");
        bExportReport.setEnabled(false);
        bExportReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportReportActionPerformed(evt);
            }
        });

        lCashTotal.setFont(new java.awt.Font("Tahoma", 1, 12));
        lCashTotal.setText("$ 00000.0");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel6.setText("Cash Total:");

        lOtherTotal.setFont(new java.awt.Font("Tahoma", 1, 12));
        lOtherTotal.setText("$ 00000.0");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel7.setText("Other Total:");

        lProCardTotal.setFont(new java.awt.Font("Tahoma", 1, 12));
        lProCardTotal.setText("$ 00000.0");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel8.setText("ProCard Total:");

        lPersonalCCTotal.setFont(new java.awt.Font("Tahoma", 1, 12));
        lPersonalCCTotal.setText("$ 00000.0");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel9.setText("Personal CC Total:");

        lExpTotal.setFont(new java.awt.Font("Tahoma", 1, 12));
        lExpTotal.setText("$ 00000.0");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel10.setText("Total Expenses:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(99, 99, 99)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lSTHrs)
                            .addComponent(lAMEXTotal)
                            .addComponent(lProCardTotal))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lTHHrs)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lPersonalCCTotal, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lCashTotal, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lOtherTotal)
                            .addComponent(lExpTotal)
                            .addComponent(lDTHrs))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bExportReport, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(spProjTree, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spProjRpt, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(lSTHrs)
                            .addComponent(jLabel3)
                            .addComponent(lTHHrs)
                            .addComponent(jLabel4)
                            .addComponent(lDTHrs))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lAMEXTotal)
                            .addComponent(jLabel6)
                            .addComponent(lCashTotal)
                            .addComponent(jLabel7)
                            .addComponent(lOtherTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lProCardTotal)
                            .addComponent(jLabel9)
                            .addComponent(lPersonalCCTotal)
                            .addComponent(jLabel10)
                            .addComponent(lExpTotal)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bExit)
                        .addGap(18, 18, 18)
                        .addComponent(bExportReport)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spProjTree, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addComponent(spProjRpt, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_bExitActionPerformed

    private void trJobItemsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_trJobItemsValueChanged
        TreePath o = this.trJobItems.getSelectionPath();
        String queryLabor = "";
        String queryExpense = "";
        String results="";

        boolean searchLabor=false;
        boolean searchExpense=false;
        DateFormat dateFormat = new SimpleDateFormat("MMM dd yyyy");
        Calendar now = Calendar.getInstance();

        int path = o.getPathCount();

        if(path< 1){
            return;
        }else if(path==1){
            queryLabor = "SELECT * FROM TimeData WHERE (Job_Number = '" +
                    this.jobNumber + "' ) ORDER BY Task_ID,Year,Week_Number ASC";
            queryExpense = "SELECT * FROM Expense WHERE (Job_Number = '" +
                    this.jobNumber + "' ) ORDER BY Task_ID,Year,Week_Number,ExpDayOfWeek ASC";
            searchLabor= true;
            searchExpense = true;
        }else if(path==2){
            String task[] = o.getLastPathComponent().toString().split(" ");
            queryLabor = "SELECT * FROM TimeData WHERE ((Job_Number = '" +
                    this.jobNumber + "' ) AND (Task_ID = '" + task[1] + "')) " +
                    "ORDER BY Year,Week_Number ASC";
            queryExpense = "SELECT * FROM Expense WHERE ((Job_Number = '" +
                    this.jobNumber + "' ) AND (Task_ID = '" + task[1] + "')) " +
                    "ORDER BY Year,Week_Number,ExpDayOfWeek ASC";
            searchLabor= true;
            searchExpense = true;
        }else if (path==3){
            String type = o.getLastPathComponent().toString();
            String task[] = o.getPathComponent(1).toString().split(" ");

            if(type.equalsIgnoreCase("Labor"))
            {
                queryLabor = "SELECT * FROM TimeData WHERE ((Job_Number = '" +
                    this.jobNumber + "' ) AND (Task_ID = '" + task[1] + "'))" +
                    "ORDER BY Year,Week_Number ASC";
                searchLabor= true;
                searchExpense = false;
            }
            if(type.equalsIgnoreCase("Expenses"))
            {
                queryExpense = "SELECT * FROM Expense WHERE ((Job_Number = '" +
                    this.jobNumber + "' ) AND (Task_ID = '" + task[1] + "'))" +
                    "ORDER BY Year,Week_Number,ExpDayOfWeek ASC";
                searchLabor= false;
                searchExpense = true;
            }

        }else
            return;

        results+="Project Report for Project Number - " + this.jobNumber + "\n";
        results+="Report Date: " + dateFormat.format(now.getTime()) + "\n";

        if(searchLabor)
            results+=searchLabor(queryLabor);
        if(searchExpense)
            results+=searchExpense(queryExpense);

        this.tpResults.setText(results);

    }//GEN-LAST:event_trJobItemsValueChanged

    private void bExportReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportReportActionPerformed
       
    }//GEN-LAST:event_bExportReportActionPerformed

    private void getJobNumber(){
        Object result = JOptionPane.showInputDialog(this,
                "Enter Job/Project Number\n");

        if(result==null||result.toString().length()<=0){
            this.jobNumber = "";
            this.dispose();
        }
        else
            this.jobNumber = result.toString().toUpperCase();

    }
    
    private void buildTree(){
        DataConnection dc1 = new DataConnection();
        ResultSet rs;
        String tempItem;
        
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(this.jobNumber);
        String query = "SELECT Task_ID FROM TimeData WHERE (Job_Number = '" +
                this.jobNumber + "' ) ORDER BY Task_ID ASC";
        try{
            dc1.connect();
            rs = dc1.dbQuery(query);
            DefaultMutableTreeNode resultNode=null;

            while(rs.next()){
                tempItem = rs.getString(1);
                if(resultNode==null||!(resultNode.toString().equalsIgnoreCase("Task " +tempItem)))
                {
                    resultNode = new DefaultMutableTreeNode("Task " +tempItem);
                    rootNode.add(resultNode);
                    resultNode.add(new DefaultMutableTreeNode("Labor"));
                    resultNode.add(new DefaultMutableTreeNode("Expenses"));
                }
            }
        }catch (Exception e)
        {
            System.out.println(e);
        }

        DefaultTreeModel dataTree = new DefaultTreeModel(rootNode);
        this.trJobItems.setModel(dataTree);
        dc1.closeConnection();
    }
    
    private void populateTotals(){
        DataConnection dc1 = new DataConnection();
        ResultSet rs;
        Double expHolder;
        String pmtTypeHolder;
        expTotal = 0.0;
        amexTotal = 0.0;
        proCardTotal = 0.0;
        cashTotal = 0.0;
        personalCCTotal = 0.0;
        otherTotal = 0.0;
        this.lExpTotal.setText("$   0.00");
        this.lAMEXTotal.setText("$   0.00");
        this.lProCardTotal.setText("$   0.00");
        this.lCashTotal.setText("$   0.00");
        this.lPersonalCCTotal.setText("$   0.00");
        this.lOtherTotal.setText("$   0.00");
       
        String queryLabor = "SELECT * FROM TimeData WHERE (Job_Number = '" +
                this.jobNumber + "' )";

        String queryExpense = "SELECT * FROM Expense WHERE (Job_Number = '" +
                this.jobNumber + "' ) ";
        
        try{
            dc1.connect();

            //Populate Labor Totals
            rs = dc1.dbQuery(queryLabor);
            while (rs.next())
            {
                if(rs.getString(6).equalsIgnoreCase("EESD Time and Half"))
                    totalTH+=rs.getDouble(7)+rs.getDouble(9)+rs.getDouble(11)+
                            rs.getDouble(13)+rs.getDouble(15)+rs.getDouble(17)+
                            rs.getDouble(19);
                else if(rs.getString(6).equalsIgnoreCase("EESD Double Time"))
                    totalDT+=rs.getDouble(7)+rs.getDouble(9)+rs.getDouble(11)+
                            rs.getDouble(13)+rs.getDouble(15)+rs.getDouble(17)+
                            rs.getDouble(19);
                else
                    totalST+=rs.getDouble(7)+rs.getDouble(9)+rs.getDouble(11)+
                            rs.getDouble(13)+rs.getDouble(15)+rs.getDouble(17)+
                            rs.getDouble(19);
            }

            //Populate Expense Total
            rs = dc1.dbQuery(queryExpense);
            while (rs.next())
            {
                expHolder = rs.getDouble("ExpTotal");
                pmtTypeHolder = rs.getString("PmtType");

                if(pmtTypeHolder.equalsIgnoreCase("AMEX"))
                    amexTotal+=expHolder;
                if(pmtTypeHolder.equalsIgnoreCase("ProCard"))
                    proCardTotal+=expHolder;
                if(pmtTypeHolder.equalsIgnoreCase("Cash"))
                    cashTotal+=expHolder;
                if(pmtTypeHolder.equalsIgnoreCase("Personal CC"))
                    personalCCTotal+=expHolder;
                if(pmtTypeHolder.equalsIgnoreCase("Other"))
                    otherTotal+=expHolder;
                expTotal += expHolder;
            }

            dc1.closeConnection();


        }catch(Exception e)
        {
            System.out.println(e);
        }
        
        this.lSTHrs.setText(formatter.format(totalST));
        this.lTHHrs.setText(formatter.format(totalTH));
        this.lDTHrs.setText(formatter.format(totalDT));
        this.lExpTotal.setText("$ " + formatter.format(expTotal));
        this.lAMEXTotal.setText("$ " + formatter.format(amexTotal));
        this.lProCardTotal.setText("$ " + formatter.format(proCardTotal));
        this.lCashTotal.setText("$ " + formatter.format(cashTotal));
        this.lPersonalCCTotal.setText("$ " + formatter.format(personalCCTotal));
        this.lOtherTotal.setText("$ " + formatter.format(otherTotal));
        
    }

    private String searchLabor(String query){
        String results = "";
        Double tempST =0.0;
        Double tempTH =0.0;
        Double tempDT =0.0;

        DataConnection dc = new DataConnection();
        dc.connect();
        try{

            Calendar taskDate = Calendar.getInstance();
            DateFormat dateFormat = new SimpleDateFormat("MMM dd yyyy");
            ResultSet rs = dc.dbQuery(query);
            results+="\n                 -----LABOR-----";
            results+="\n\nTaskID Date           Hrs  Type  Comment\n";
            results+="__________________________________________________________________________________\n";

            while(rs.next()){
                String labor;
                String line="";
                String task;
                int counter;
                int dayCounter;
                taskDate.set(Calendar.YEAR, rs.getInt("Year"));
                taskDate.set(Calendar.WEEK_OF_YEAR, rs.getInt("Week_Number"));
                taskDate.set(Calendar.DAY_OF_WEEK,1);
                //set LaborType
                if(rs.getString(6).equalsIgnoreCase("EESD Time and Half"))
                    labor = "TH";
                else if(rs.getString(6).equalsIgnoreCase("EESD Double Time"))
                    labor = "DT";
                else
                    labor = "ST";
                //get Task Number
                task = rs.getString(5);

                for(dayCounter=7;dayCounter<=19;dayCounter+=2) {
                    if(dayCounter>7)
                        taskDate.add(Calendar.DAY_OF_WEEK, 1);

                    double hrs = rs.getDouble(dayCounter);
                    if(hrs>0.0){
                        //Add TaskID
                        line=task;
                        for(counter=0;counter<=5;counter++)
                            line+=" ";

                        //Add Date
                        line+=dateFormat.format(taskDate.getTime());
                        for(counter=line.length();counter<=21;counter++)
                            line+=" ";

                        //Add Hours
                        line+= Double.toString(hrs);
                        for(counter=line.length();counter<=26;counter++)
                            line+=" ";

                        //Increment appropriate line Total
                        if(labor.equalsIgnoreCase("ST"))
                            tempST+=hrs;
                        else if(labor.equalsIgnoreCase("TH"))
                            tempTH+=hrs;
                        else if(labor.equalsIgnoreCase("DT"))
                            tempDT+=hrs;

                        //Add Labor Type
                        line+= labor;
                        for(counter=line.length();counter<=32;counter++)
                            line+=" ";

                        //Add Comment
                        line+=rs.getString(dayCounter+1) + "\n";
                        results+=line;
                    }
                }
            }

        }catch(Exception e) {
            System.out.println(e);
        }

        results+="\nTotal Straight Time Hours (ST) = " + Double.toString(tempST) +
                   "\nTotal Time and Half Hours (TH) = " + Double.toString(tempTH) +
                   "\nTotal Double Time Hours   (DT) = " + Double.toString(tempDT);
        results+="\n";

        dc.closeConnection();
        return results;
    }

    private String searchExpense(String query)
    {
        String results="";
        Double tempExp =0.0;
        Double rptAMEXTotal;
        String expType;
        String pmtType;
        String line="";
        int expDay;
        String task;
        int counter;

        DataConnection dc = new DataConnection();
        dc.connect();
        try{

            Calendar taskDate = Calendar.getInstance();
            DateFormat dateFormat = new SimpleDateFormat("MMM dd yyyy");
            ResultSet rs = dc.dbQuery(query);
            results+="\n                -----EXPENSES-----";
            results+="\n\nTaskID Date            Amount  Payment Type  Expense Type        Comment\n";
            results+="__________________________________________________________________________________\n";

            while(rs.next()){
                expType="";
                pmtType="";
                line="";
                task="";

                taskDate.set(Calendar.YEAR, rs.getInt("Year"));
                taskDate.set(Calendar.WEEK_OF_YEAR, rs.getInt("Week_Number"));
                taskDate.set(Calendar.DAY_OF_WEEK,1);

                expType = rs.getString("ExpType");
                pmtType = rs.getString("PmtType");
                expDay = rs.getInt("ExpDayOfWeek");

                //get Task Number
                task = rs.getString("Task_ID");

                taskDate.add(Calendar.DAY_OF_WEEK, expDay-1);

                double expenseAmt = rs.getDouble("ExpTotal");
                if(expenseAmt>0.0){
                    //Add TaskID
                    line=task;
                    for(counter=0;counter<=5;counter++)
                        line+=" ";

                    //Add Date
                    line+=dateFormat.format(taskDate.getTime());
                    for(counter=line.length();counter<=21;counter++)
                        line+=" ";

                    //Add Expense Amt
                    line+= formatter.format(expenseAmt);
                    for(counter=line.length();counter<=30;counter++)
                        line+=" ";

                    //Increment expense Total
                    tempExp+=expenseAmt;

                    //Add Payment Type
                    line+= pmtType;
                    for(counter=line.length();counter<=44;counter++)
                        line+=" ";

                    //Add Expense Type
                    line+= expType;
                    for(counter=line.length();counter<=64;counter++)
                        line+=" ";

                    //Add Comment
                    line+=rs.getString("ExpComment") + "\n";
                    results+=line;
                    }
                }


        }catch(Exception e) {
            System.out.println(e);
        }

        results+="\n   Total Expenses =  $ " + formatter.format(tempExp);
        results+="\n       AMEX Total =  $ " + formatter.format(amexTotal);
        results+="\n    ProCard Total =  $ " + formatter.format(proCardTotal);
        results+="\n       Cash Total =  $ " + formatter.format(cashTotal);
        results+="\nPersonal CC Total =  $ " + formatter.format(personalCCTotal);
        results+="\n      Other Total =  $ " + formatter.format(otherTotal);

        results+="\n";

        dc.closeConnection();
        return results;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bExit;
    private javax.swing.JButton bExportReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lAMEXTotal;
    private javax.swing.JLabel lCashTotal;
    private javax.swing.JLabel lDTHrs;
    private javax.swing.JLabel lExpTotal;
    private javax.swing.JLabel lOtherTotal;
    private javax.swing.JLabel lPersonalCCTotal;
    private javax.swing.JLabel lProCardTotal;
    private javax.swing.JLabel lSTHrs;
    private javax.swing.JLabel lTHHrs;
    private javax.swing.JScrollPane spProjRpt;
    private javax.swing.JScrollPane spProjTree;
    private javax.swing.JTextPane tpResults;
    private javax.swing.JTree trJobItems;
    // End of variables declaration//GEN-END:variables


 
}

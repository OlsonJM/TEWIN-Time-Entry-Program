/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Expenses.java
 *
 * Created on Apr 1, 2010, 1:00:55 PM
 */

package tewin;
import java.sql.*;
//import java.text.*;
import javax.swing.*;
import javax.swing.table.*;
//import java.util.Calendar;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
//import java.awt.BorderLayout;
import java.text.NumberFormat;
import java.text.DecimalFormat;

import java.awt.*;
import java.util.*;



/**
 *
 * @author E0051024
 */
public class Expenses extends javax.swing.JFrame {

    private DefaultTableModel model;
    private String[] columnNames;
    private JTable tblExpEntries;
    private JComboBox payType;
    private JComboBox expType;
    private DefaultCellEditor payTypeEditor;
    private DefaultCellEditor expTypeEditor;
    private String jobNumber;
    private String taskID;
    private java.util.Calendar date;
    private Utilities u;
    private int jobID;
    private int expDay;
    private int lineCount;
    private ResultSet rs;
    private Double totalExp;
    private Double amexTotal;
    private Double proCardTotal;
    private Double cashTotal;
    private Double personalCCTotal;
    private Double otherTotal;
    private NumberFormat formatter;
    private RightTableCellRenderer rndr;

    /** Creates new form Expenses */
    public Expenses(int ID, int day) {
        initComponents();
        formatter = new DecimalFormat("#0.00");
        date = java.util.Calendar.getInstance();
        jobID = ID;
        expDay = day;
        lineCount = 0;
        totalExp = 0.0;
        getJobInfo();
        this.u = new Utilities();
        //setColumnModel();
        buildTable();
        rndr = new RightTableCellRenderer();
    }
    
    public Expenses(){
        initComponents();
        formatter = new DecimalFormat("#0.00");
        date = java.util.Calendar.getInstance();
        this.u = new Utilities();
        lineCount = 0;
        totalExp = 0.0;
        rndr = new RightTableCellRenderer();
    }

    public void setExpenses(int ID, int day){
        jobID = ID;
        expDay = day;
        getJobInfo();
        buildTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlExpList = new javax.swing.JPanel();
        bSave = new javax.swing.JButton();
        bCloseCancel = new javax.swing.JButton();
        bAdd = new javax.swing.JButton();
        lExpDate = new javax.swing.JLabel();
        lJobInfo = new javax.swing.JLabel();
        lJobInfo1 = new javax.swing.JLabel();
        lCashTotal = new javax.swing.JLabel();
        lJobComment = new javax.swing.JLabel();
        lJobInfo3 = new javax.swing.JLabel();
        bRemoveExp = new javax.swing.JButton();
        lProCardTotal = new javax.swing.JLabel();
        lJobInfo2 = new javax.swing.JLabel();
        lAMEXTotal = new javax.swing.JLabel();
        lJobInfo4 = new javax.swing.JLabel();
        lJobInfo5 = new javax.swing.JLabel();
        lExpTotal = new javax.swing.JLabel();
        lPersonalCCTotal = new javax.swing.JLabel();
        lJobInfo6 = new javax.swing.JLabel();
        lOtherTotal = new javax.swing.JLabel();
        lJobInfo7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("TEWIN - Expenses");
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setResizable(false);

        javax.swing.GroupLayout pnlExpListLayout = new javax.swing.GroupLayout(pnlExpList);
        pnlExpList.setLayout(pnlExpListLayout);
        pnlExpListLayout.setHorizontalGroup(
            pnlExpListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 762, Short.MAX_VALUE)
        );
        pnlExpListLayout.setVerticalGroup(
            pnlExpListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 134, Short.MAX_VALUE)
        );

        bSave.setText("Save Table");
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        bCloseCancel.setText("Exit");
        bCloseCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCloseCancelActionPerformed(evt);
            }
        });

        bAdd.setText("Add Expense");
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });

        lExpDate.setFont(new java.awt.Font("Tahoma", 1, 14));
        lExpDate.setText("Expense Date");

        lJobInfo.setFont(new java.awt.Font("Tahoma", 1, 14));
        lJobInfo.setText("Job Number & Task ID");

        lJobInfo1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lJobInfo1.setText("Cash Total:");

        lCashTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lCashTotal.setText("$0000.00");

        lJobComment.setFont(new java.awt.Font("Tahoma", 1, 14));
        lJobComment.setText("Comment Text will be displayed here");

        lJobInfo3.setFont(new java.awt.Font("Tahoma", 1, 14));
        lJobInfo3.setText("Line Comment:");

        bRemoveExp.setText("Remove Expense");
        bRemoveExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveExpActionPerformed(evt);
            }
        });

        lProCardTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lProCardTotal.setText("$0000.00");

        lJobInfo2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lJobInfo2.setText("ProCard Total:");

        lAMEXTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lAMEXTotal.setText("$0000.00");

        lJobInfo4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lJobInfo4.setText("AMEX Total:");

        lJobInfo5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lJobInfo5.setText("Total Expenses:");

        lExpTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lExpTotal.setText("$0000.00");

        lPersonalCCTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lPersonalCCTotal.setText("$0000.00");

        lJobInfo6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lJobInfo6.setText("Personal CC Total:");

        lOtherTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lOtherTotal.setText("$0000.00");

        lJobInfo7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lJobInfo7.setText("Other Total:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lJobInfo1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lJobInfo2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lProCardTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(lCashTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lJobInfo7)
                                    .addComponent(lJobInfo5)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lJobInfo4)
                                .addGap(18, 18, 18)
                                .addComponent(lAMEXTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lJobInfo6)))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lPersonalCCTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lOtherTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lExpTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(145, 145, 145)
                                .addComponent(bCloseCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(bSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bRemoveExp, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lJobInfo3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lJobComment))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lJobInfo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lExpDate))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlExpList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lExpDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lJobInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lJobInfo3)
                    .addComponent(lJobComment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlExpList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lJobInfo4)
                            .addComponent(lAMEXTotal)
                            .addComponent(lJobInfo6)
                            .addComponent(lPersonalCCTotal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lJobInfo2)
                            .addComponent(lProCardTotal)
                            .addComponent(lOtherTotal)
                            .addComponent(lJobInfo7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lJobInfo1)
                            .addComponent(lCashTotal)
                            .addComponent(lExpTotal)
                            .addComponent(lJobInfo5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bAdd)
                            .addComponent(bRemoveExp))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bCloseCancel)
                            .addComponent(bSave))))
                .addGap(11, 11, 11))
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getJobInfo(){
        DataConnection dc = new DataConnection();
        String query = "SELECT * FROM TimeData WHERE ID = " + Integer.toString(jobID);

        dc.connect();
        try{
            rs = dc.dbQuery(query);
            if(rs.next()){
                jobNumber = rs.getString(4);
                taskID = rs.getString(5);
                date.set(Calendar.YEAR, rs.getInt(2));
                date.set(Calendar.WEEK_OF_YEAR, rs.getInt(3));
                date.set(Calendar.DAY_OF_WEEK, expDay);

                lJobComment.setText(rs.getString(8 + (expDay-1)*2));

                lJobInfo.setText("Expenses for " + jobNumber + "." + taskID);
                DateFormat dateFormat = new SimpleDateFormat("EEEE MMMMM dd, yyyy");
                lExpDate.setText("Expense Summary for " + dateFormat.format(date.getTime()));

            }else
               JOptionPane.showMessageDialog(null, "ERROR: Job Not Found");



        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Data Connection Error: " + e);
        }

        dc.closeConnection();

    }
    private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
        this.model.addRow(new Object[]{"","","","",""});
        this.tblExpEntries.repaint();
        this.pack();
    }//GEN-LAST:event_bAddActionPerformed

    private void bCloseCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCloseCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_bCloseCancelActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        //Save all lines in the table
        DataConnection dc = new DataConnection();
        if(!validateEntries()){
            JOptionPane.showMessageDialog(this, "Form not valid. Check for commas in fields ");
            return;
        }

        int counter = 0;
        int rowCount = this.model.getRowCount();
        String et;
        String pt;
        String unsavedData="";
        Double expAmount;
        String expComment;
        dc.connect();
        try{
            while(counter<rowCount)
            {

                //check if row contains minimum data
                et = this.model.getValueAt(counter,0).toString();
                pt = this.model.getValueAt(counter,1).toString();
                String amount = this.model.getValueAt(counter,2).toString();

                //skip lines with blank Expense Type, Payment Type, and Amount
                if(et.isEmpty()||pt.isEmpty()||amount.isEmpty()){
                    unsavedData+="Row " + Integer.toString(counter+1) + " not saved \n";
                    counter++;
                    continue;
                }

                expAmount = this.u.validateHrs(this.model.getValueAt(counter,2).toString());
                expComment = this.u.validateCom(this.model.getValueAt(counter,3).toString());

                String ID = this.model.getValueAt(counter, 4).toString();
                if(ID.length()==0)
                    dc.addExpense(jobID, date.get(Calendar.YEAR), date.get(Calendar.WEEK_OF_YEAR),
                            expDay, jobNumber, taskID, et, pt, expAmount , expComment);
                else{
                    int intID = (Integer)this.model.getValueAt(counter, 4);
                    dc.updateExpense(intID, expDay, jobNumber, taskID, et, pt, expAmount, expComment);
                }
                counter++;
            }


        }
        catch(Exception e)
        {
            System.out.println(e);
        }

        dc.closeConnection();

        if(unsavedData.length()>0){
            unsavedData += "Check for vaild entries in data fields\n"+
                    "Job Number, Task ID, Labor Type, and Hours field must\n" +
                    "be populated to save a line. Fields must not contain commas.";
            JOptionPane.showMessageDialog(this, unsavedData);
        }else
        {
            buildTable();
        }
    }//GEN-LAST:event_bSaveActionPerformed

    private void bRemoveExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveExpActionPerformed
        int row = this.tblExpEntries.getSelectedRow();

        if(row>=0)
        {
            DataConnection dc = new DataConnection();
            dc.connect();
            dc.deleteExpense((Integer)this.tblExpEntries.getModel().getValueAt(row, 4));
            dc.closeConnection();
            buildTable();

        }

    }//GEN-LAST:event_bRemoveExpActionPerformed

    private void setColumnModel(){

        //this.model = new DefaultTableModel();
        this.tblExpEntries = new JTable();
        this.columnNames = new String[]{"Expense","Payment Type", "Amount", "Comment","ID"};
        this.model.setColumnIdentifiers(this.columnNames);
        this.model.setColumnCount(5);

        //Create Expense type ComboBox
        /*
        this.payType = new JComboBox();
        payType.addItem("AMEX");
        payType.addItem("ProCard");
        payType.addItem("Cash");
        payType.addItem("Personal CC");
        payType.addItem("Other");
        */
        String pay[] = {"AMEX","ProCard","Cash","Personal CC","Other"};
        this.payType = new JComboBox<String>(pay);
        
        payType.setEditable(false);

        this.payTypeEditor = new DefaultCellEditor(this.payType);

        /*
        this.expType = new JComboBox();
        expType.addItem("Meals");
        expType.addItem("Hotel");
        expType.addItem("Job Materials");
        expType.addItem("Airfare");
        expType.addItem("Safety Training");
        expType.addItem("Small Tools");
        expType.addItem("Office Supplies");
        expType.addItem("Fuel");
        
        */
        String exp[] = {"Meals","Hotel","Job Materials", "Airfare","Safety Training",
            "Small Tools", "Office Supplies", "Fuel"};
        this.expType = new JComboBox<String>(exp);
        expType.setEditable(true);
        
        this.expTypeEditor = new DefaultCellEditor(this.expType);



        
    }

    private void buildTable(){
        DataConnection dc = new DataConnection();
        this.model = new DefaultTableModel();
        Double expTotal = 0.0;
        amexTotal = 0.0;
        proCardTotal = 0.0;
        cashTotal = 0.0;
        personalCCTotal = 0.0;
        otherTotal = 0.0;
        String pmtTypeHolder = "";
        int ID;
        this.lExpTotal.setText("$   0.00");
        this.lAMEXTotal.setText("$   0.00");
        this.lProCardTotal.setText("$   0.00");
        this.lCashTotal.setText("$   0.00");
        this.lPersonalCCTotal.setText("$   0.00");
        this.lOtherTotal.setText("$   0.00");

        

        dc.connect();

        //GET RESULT DATA
        try{
            this.rs = dc.getExpenses(jobID,expDay);
        }
        catch (Exception e) {
            System.out.println(e);
            this.rs = null;
        }

        //Count # of lines

        this.lineCount=0;
        try{

            if(this.rs != null)
            {
                while(this.rs.next()){
                    this.lineCount++;
                }

            }
        }
        catch (Exception e) {
            System.out.println(e);
        }
        try{
            setColumnModel();
            this.totalExp = 0.0;
            if(this.lineCount>0)
            {

                this.rs = dc.getExpenses(jobID,expDay);
                while(this.rs.next()){
                    expTotal=this.rs.getDouble("ExpTotal");
                    pmtTypeHolder = this.rs.getString("PmtType");
                    //Populate Totals
                    this.totalExp+=expTotal;

                    if(pmtTypeHolder.equalsIgnoreCase("AMEX"))
                        amexTotal+=expTotal;
                    if(pmtTypeHolder.equalsIgnoreCase("ProCard"))
                        proCardTotal+=expTotal;
                    if(pmtTypeHolder.equalsIgnoreCase("Cash"))
                        cashTotal+=expTotal;
                    if(pmtTypeHolder.equalsIgnoreCase("Personal CC"))
                        personalCCTotal+=expTotal;
                    if(pmtTypeHolder.equalsIgnoreCase("Other"))
                        otherTotal+=expTotal;




                    String temp = this.rs.getString("ExpComment");
                    ID = this.rs.getInt("ID");

                    if(temp == null)
                        temp = "";

                    this.model.addRow(new Object[]{this.rs.getString("ExpType"),
                        pmtTypeHolder,expTotal,temp,ID});


                }
                this.lExpTotal.setText("$ " + formatter.format(this.totalExp));
                this.lAMEXTotal.setText("$ " + formatter.format(amexTotal));
                this.lProCardTotal.setText("$ " + formatter.format(proCardTotal));
                this.lCashTotal.setText("$ " + formatter.format(cashTotal));
                this.lPersonalCCTotal.setText("$ " + formatter.format(personalCCTotal));
                this.lOtherTotal.setText("$ " + formatter.format(otherTotal));
            }


            this.model.setRowCount(this.lineCount);
            this.tblExpEntries.setModel(this.model);

            this.pnlExpList.removeAll();
            this.pnlExpList.setVisible(true);
            //Expense Type
            this.tblExpEntries.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            TableColumn col = this.tblExpEntries.getColumnModel().getColumn(0);
            col.setPreferredWidth(150);
            col.setCellEditor(this.expTypeEditor);
            //Expense Payment Type
            col = this.tblExpEntries.getColumnModel().getColumn(1);
            col.setPreferredWidth(85);
            col.setCellEditor(this.payTypeEditor);
            //Amount
            col = this.tblExpEntries.getColumnModel().getColumn(2);
            col.setPreferredWidth(75);
            col.setCellRenderer(rndr);

            //Comment
            col = this.tblExpEntries.getColumnModel().getColumn(3);
            col.setPreferredWidth(550);
            //ID
            col = this.tblExpEntries.getColumnModel().getColumn(4);
            col.setPreferredWidth(1);
       

            //Set table Properties
            this.tblExpEntries.setFillsViewportHeight(true);
            this.tblExpEntries.setCellSelectionEnabled(false);
            this.tblExpEntries.setAutoCreateRowSorter(true);
            this.tblExpEntries.setRowSelectionAllowed(true);
            this.tblExpEntries.setColumnSelectionAllowed(false);
            this.tblExpEntries.getTableHeader().setReorderingAllowed(false);
            this.tblExpEntries.setSize(800, 320);
            this.tblExpEntries.setRowHeight(20);
            this.pnlExpList.add(this.tblExpEntries);
            this.pnlExpList.setLayout(new BorderLayout());
            this.pnlExpList.add(this.tblExpEntries.getTableHeader(), BorderLayout.PAGE_START);
            this.pnlExpList.add(this.tblExpEntries, BorderLayout.CENTER);
            this.pnlExpList.setSize(this.tblExpEntries.getHeight(), this.tblExpEntries.getWidth());
            this.pack();

        }catch (Exception e)
        {
            System.out.println(e);
        }

        dc.closeConnection();
    }

     private boolean validateEntries(){
        //Check all editable fields for commas
        boolean formValid=true;
        int rowCount = this.model.getRowCount();

        for(int i=0;i<rowCount;i++){
            if(!this.model.getValueAt(i,0).toString().isEmpty())
                formValid = !this.u.checkForCommas(this.model.getValueAt(i, 0).toString());
            if(!formValid)
                break;
            if(!this.model.getValueAt(i,2).toString().isEmpty())
                formValid = !this.u.checkForCommas(this.model.getValueAt(i, 1).toString());
            if(!formValid)
                break;
            if(!this.model.getValueAt(i,3).toString().isEmpty())
                formValid = !this.u.checkForCommas(this.model.getValueAt(i, 2).toString());
            if(!formValid)
                break;
        }

        return formValid;

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bCloseCancel;
    private javax.swing.JButton bRemoveExp;
    private javax.swing.JButton bSave;
    private javax.swing.JLabel lAMEXTotal;
    private javax.swing.JLabel lCashTotal;
    private javax.swing.JLabel lExpDate;
    private javax.swing.JLabel lExpTotal;
    private javax.swing.JLabel lJobComment;
    private javax.swing.JLabel lJobInfo;
    private javax.swing.JLabel lJobInfo1;
    private javax.swing.JLabel lJobInfo2;
    private javax.swing.JLabel lJobInfo3;
    private javax.swing.JLabel lJobInfo4;
    private javax.swing.JLabel lJobInfo5;
    private javax.swing.JLabel lJobInfo6;
    private javax.swing.JLabel lJobInfo7;
    private javax.swing.JLabel lOtherTotal;
    private javax.swing.JLabel lPersonalCCTotal;
    private javax.swing.JLabel lProCardTotal;
    private javax.swing.JPanel pnlExpList;
    // End of variables declaration//GEN-END:variables

    class RightTableCellRenderer extends DefaultTableCellRenderer {
        protected  RightTableCellRenderer() {
            setHorizontalAlignment(JLabel.RIGHT);
        }

        }

}


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SearchDB.java
 *
 * Created on Oct 28, 2009, 8:32:44 PM
 */

package tewin;
import java.awt.Color;
import javax.swing.*;
import java.sql.*;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.io.*;
import java.text.NumberFormat;
import java.text.DecimalFormat;
import java.util.ArrayList;

/**
 *
 * @author James M. Olson
 */
public class SearchDB extends javax.swing.JFrame {

    private ResultSet rs;
    protected ArrayList<Object> laborType;
    private ArrayList<Object> paymentType;
    private String[] filters;
    private int filterCount;
    protected DataConnection dc;
    private String yearSearch;
    private String monthSearch;
    private String startDateRange;
    private String endDateRange;
    protected ArrayList<Object> taskIDs;
    protected ArrayList<String> customers;
    protected int resultCount;
    private Double totalHours;
    private String[] resultHeader;
    private String resultFooter;
    protected ArrayList<Object> resultHours;
    protected ArrayList<Object> resultJobNum;
    protected ArrayList<Object> resultTaskID;
    protected ArrayList<Object> resultDate;
    protected ArrayList<Object> resultLaborType;
    private ArrayList<Object> resultPmtType;
    protected ArrayList<Object> resultComment;
    protected NumberFormat formatter;
    private boolean otSearch;
    protected java.util.Date otSearchStart;
    protected java.util.Date otSearchEnd;

    /** Creates new form SearchDB */
    public SearchDB() {
        this.dc = new DataConnection();
        formatter = new DecimalFormat("#0.00");
        initComponents();
        this.monthSearch = "";
        this.startDateRange = "";
        this.endDateRange = "";
        this.filters = new String[4];
        this.spStartDate.setEditor(new JSpinner.DateEditor(this.spStartDate, "dd MMM yyyy"));
        this.spEndDate.setEditor(new JSpinner.DateEditor(this.spEndDate, "dd MMM yyyy"));
        this.spMonthYear.setEditor(new JSpinner.DateEditor(this.spMonthYear, "MMMMM yyyy"));
        this.spYear.setEditor(new JSpinner.DateEditor(this.spYear, "yyyy"));
        setFilterArray();
        this.cbLaborType.setSelectedIndex(0);
        this.cbLaborType.setBackground(Color.WHITE);
        this.rbLabor.setSelected(true);
        otSearch = false;

    }

    public SearchDB(boolean otSearch)
    {
        this.dc = new DataConnection();
        formatter = new DecimalFormat("#0.00");
        this.monthSearch = "";
        this.startDateRange = "";
        this.endDateRange = "";
        this.filters = new String[4];
        setFilterArray();
        otSearch = true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSearchSelection = new javax.swing.ButtonGroup();
        fc = new javax.swing.JFileChooser();
        bgSearchType = new javax.swing.ButtonGroup();
        tbJobSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cbLaborType = new javax.swing.JComboBox();
        lFilter3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tbKeywordSearch = new javax.swing.JTextField();
        bSearch = new javax.swing.JButton();
        rbEntireDB = new javax.swing.JRadioButton();
        rbSearchDateRange = new javax.swing.JRadioButton();
        lStartDate = new javax.swing.JLabel();
        lEndDate = new javax.swing.JLabel();
        spStartDate = new javax.swing.JSpinner();
        spEndDate = new javax.swing.JSpinner();
        bExit = new javax.swing.JButton();
        cbJobFilter = new javax.swing.JCheckBox();
        cbLaborFilter = new javax.swing.JCheckBox();
        cbKeywordFilter = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        taResults = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        spMonthYear = new javax.swing.JSpinner();
        lMonthYear = new javax.swing.JLabel();
        rbSearchMonth = new javax.swing.JRadioButton();
        bExportCSV = new javax.swing.JButton();
        rbSearchYear = new javax.swing.JRadioButton();
        lYear = new javax.swing.JLabel();
        spYear = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        rbLabor = new javax.swing.JRadioButton();
        rbExpense = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        tbCustomerFilter = new javax.swing.JTextField();
        cbCustomerFilter = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();

        fc.setBackground(java.awt.Color.white);
        fc.setDialogTitle("Select Location to Export CSV File");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Time Entry Database");
        setLocationByPlatform(true);

        tbJobSearch.setToolTipText("Enter partial or complete job number");

        jLabel2.setText("Project or Job");

        cbLaborType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PRODUCTIVE", "NON-PRODUCTIVE", "EESD Labor", "EESD Time and Half", "EESD Double Time", "EESD Unassigned", "EESD Unapplied", "EESD Authorized", "EESD Holiday", "EESD Vacation", "EESD Safety", "EESD Training", "EESD Marketing", "EESD Sick" }));
        cbLaborType.setToolTipText("Return records only with selected labor types");

        lFilter3.setText(" Labor Type");

        jLabel4.setText("Comment Field");

        tbKeywordSearch.setToolTipText("Search comment sections of time card for keyword");

        bSearch.setText("Search");
        bSearch.setToolTipText("Query database");
        bSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSearchActionPerformed(evt);
            }
        });

        bgSearchSelection.add(rbEntireDB);
        rbEntireDB.setSelected(true);
        rbEntireDB.setText("Search Entire Database");
        rbEntireDB.setToolTipText("Apply search query to entire database");
        rbEntireDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEntireDBActionPerformed(evt);
            }
        });

        bgSearchSelection.add(rbSearchDateRange);
        rbSearchDateRange.setText("Search by Date Range");
        rbSearchDateRange.setToolTipText("Apply search query only to records within date window");
        rbSearchDateRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchDateRangeActionPerformed(evt);
            }
        });

        lStartDate.setText("Start Date");
        lStartDate.setEnabled(false);

        lEndDate.setText("End Date");
        lEndDate.setEnabled(false);

        spStartDate.setModel(new javax.swing.SpinnerDateModel());
        spStartDate.setEnabled(false);

        spEndDate.setModel(new javax.swing.SpinnerDateModel());
        spEndDate.setEnabled(false);

        bExit.setText("Done");
        bExit.setToolTipText("Return to main applicaiton");
        bExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExitActionPerformed(evt);
            }
        });

        cbJobFilter.setText("Apply Filter");
        cbJobFilter.setToolTipText("Select to add Job Number Filter");

        cbLaborFilter.setText("Apply Filter");
        cbLaborFilter.setToolTipText("Select to apply Labor Type filter");

        cbKeywordFilter.setText("Apply Filter");
        cbKeywordFilter.setToolTipText("Select to apply Keyword Filter");

        taResults.setColumns(40);
        taResults.setFont(new java.awt.Font("Courier New", 0, 12));
        taResults.setLineWrap(true);
        taResults.setRows(20);
        taResults.setTabSize(5);
        taResults.setToolTipText("Your search results will display here");
        taResults.setWrapStyleWord(true);
        taResults.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(taResults);

        jLabel1.setText("SEARCH TYPE");

        spMonthYear.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MONTH));
        spMonthYear.setEnabled(false);

        lMonthYear.setText("Search Month");
        lMonthYear.setEnabled(false);

        bgSearchSelection.add(rbSearchMonth);
        rbSearchMonth.setText("Search by Month/Year");
        rbSearchMonth.setToolTipText("Apply search query only to records within date window");
        rbSearchMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchMonthActionPerformed(evt);
            }
        });

        bExportCSV.setText("Export *.CSV");
        bExportCSV.setToolTipText("Export results to CSV File");
        bExportCSV.setEnabled(false);
        bExportCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportCSVActionPerformed(evt);
            }
        });

        bgSearchSelection.add(rbSearchYear);
        rbSearchYear.setText("Search by Year");
        rbSearchYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchYearActionPerformed(evt);
            }
        });

        lYear.setText("Search Year");
        lYear.setEnabled(false);

        spYear.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.YEAR));
        spYear.setEnabled(false);

        bgSearchType.add(rbLabor);
        rbLabor.setText("Labor");
        rbLabor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLaborActionPerformed(evt);
            }
        });

        bgSearchType.add(rbExpense);
        rbExpense.setText("Expense");
        rbExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbExpenseActionPerformed(evt);
            }
        });

        jLabel5.setText("SEARCH FILTERS");

        tbCustomerFilter.setToolTipText("Sperate multiple customers with comma");

        cbCustomerFilter.setText("Apply Filter");
        cbCustomerFilter.setToolTipText("Select to apply TaskID Filter");

        jLabel6.setText("Customer");
        jLabel6.setToolTipText("toolTipText\tEnter multiple ID's seperated by space");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lFilter3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbKeywordFilter, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbCustomerFilter, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbJobFilter, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbLaborFilter, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lYear)
                        .addGap(18, 18, 18)
                        .addComponent(spYear, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(rbSearchYear))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(rbEntireDB))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rbSearchDateRange)
                            .addComponent(rbSearchMonth)
                            .addComponent(bSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lMonthYear)
                                .addGap(10, 10, 10)
                                .addComponent(spMonthYear))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lStartDate)
                                    .addComponent(lEndDate))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(spStartDate)
                                    .addComponent(spEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bExportCSV)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bExit, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(cbLaborType, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tbKeywordSearch, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tbJobSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tbCustomerFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addComponent(rbLabor)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbExpense))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbLabor)
                            .addComponent(rbExpense))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cbJobFilter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbJobSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cbKeywordFilter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbKeywordSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cbCustomerFilter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tbCustomerFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lFilter3)
                            .addComponent(cbLaborFilter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLaborType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbEntireDB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbSearchYear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lYear)
                            .addComponent(spYear, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(rbSearchMonth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spMonthYear, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lMonthYear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbSearchDateRange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lStartDate)
                            .addComponent(spStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lEndDate))
                        .addGap(18, 18, 18)
                        .addComponent(bSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bExportCSV)
                            .addComponent(bExit))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * radio button for search date range selected
     * @param evt
     */
    private void rbSearchDateRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchDateRangeActionPerformed
        this.lEndDate.setEnabled(true);
        this.lStartDate.setEnabled(true);
        this.lMonthYear.setEnabled(false);
        this.lYear.setEnabled(false);
        this.spYear.setEnabled(false);
        this.spEndDate.setEnabled(true);
        this.spStartDate.setEnabled(true);
        this.spMonthYear.setEnabled(false);
    }//GEN-LAST:event_rbSearchDateRangeActionPerformed

    /**
     * radio button for search entire database selected
     * @param evt
     */
    private void rbEntireDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEntireDBActionPerformed
        this.lEndDate.setEnabled(false);
        this.lStartDate.setEnabled(false);
        this.lMonthYear.setEnabled(false);
        this.lYear.setEnabled(false);
        this.spYear.setEnabled(false);
        this.spEndDate.setEnabled(false);
        this.spStartDate.setEnabled(false);
        this.spMonthYear.setEnabled(false);
    }//GEN-LAST:event_rbEntireDBActionPerformed

    /**
     * Exit button selected
     * @param evt
     */
    private void bExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExitActionPerformed
        //this.dc.closeConnection();
        this.dispose();
    }//GEN-LAST:event_bExitActionPerformed

    /**
     * Search button selected
     * @param evt
     */
    private void bSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSearchActionPerformed

        this.filterCount = 0;
        if(!applyFilters())
        {
            return;
        }

        getDBResults();
        generateReport();
        
    }//GEN-LAST:event_bSearchActionPerformed

    /**
     * radio button for month search selected
     * @param evt
     */
    private void rbSearchMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchMonthActionPerformed

        this.lEndDate.setEnabled(false);
        this.lStartDate.setEnabled(false);
        this.lMonthYear.setEnabled(true);
        this.lYear.setEnabled(false);
        this.spYear.setEnabled(false);
        this.spEndDate.setEnabled(false);
        this.spStartDate.setEnabled(false);
        this.spMonthYear.setEnabled(true);
    }//GEN-LAST:event_rbSearchMonthActionPerformed

    /**
     * export search results to *.CSV File
     * @param evt
     */
    private void bExportCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportCSVActionPerformed

        DateFormat dateFormat = new SimpleDateFormat("EEE MMMM dd yyyy");
        boolean success = false;
        String fileName = "\\TEWIN_Search_Results.CSV";
        String location;
        this.fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        this.fc.setAcceptAllFileFilterUsed(false);

        if(this.fc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            location = this.fc.getSelectedFile().toString();
        }else
            return;


        File results = new File(location+fileName);
        if(results.exists())
        {
            int response = JOptionPane.showConfirmDialog(this,
                "Result file already exists\n"+
                "Do you wish to overwrite?", "DB Search Results CSV Export",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response != JOptionPane.YES_OPTION){
                return;
            }
        }

        try{
                if(!results.exists())
                    results.createNewFile();

                BufferedWriter writer = new BufferedWriter(new FileWriter(results));
                int i = 0;
                while(i<this.resultHeader.length){
                    if(this.resultHeader[i]!=null){
                        writer.write(this.resultHeader[i++]+",");
                        writer.newLine();
                    }else
                        i++;
                }

                writer.write("Date,JOB,TASK,LABOR TYPE,Hours,");
                writer.newLine();
                
                i=0;
                while(i<this.resultCount){
                    writer.write(dateFormat.format((java.util.Date)this.resultDate.get(i))+",");
                    writer.write((String)this.resultJobNum.get(i)+",");
                    writer.write((String)this.resultTaskID.get(i)+",");
                    writer.write((String)this.resultLaborType.get(i)+",");
                    writer.write((String)this.resultHours.get(i++)+",");
                    writer.newLine();
                }

                writer.write(this.resultFooter);
                writer.newLine();
                writer.close();
                success = true;

            }catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error creating export file\n" + e);
                return;
            }

        if(success)
            JOptionPane.showMessageDialog(this, "Result Export Successfull!\n"+
                    "Location:" + results.toString());

    }//GEN-LAST:event_bExportCSVActionPerformed

    /**
     * radio button for year search selected
     * @param evt
     */
    private void rbSearchYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchYearActionPerformed

        this.lEndDate.setEnabled(false);
        this.lStartDate.setEnabled(false);
        this.lMonthYear.setEnabled(false);
        this.lYear.setEnabled(true);
        this.spYear.setEnabled(true);
        this.spEndDate.setEnabled(false);
        this.spStartDate.setEnabled(false);
        this.spMonthYear.setEnabled(false);
    }//GEN-LAST:event_rbSearchYearActionPerformed

    private void rbLaborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLaborActionPerformed
        this.lFilter3.setText("Labor Type");
        this.cbLaborType.removeAllItems();
        int counter=0;
        while(counter<=13)
        {
            this.cbLaborType.addItem((String)this.laborType.get(counter));
            counter++;
        }
        this.cbLaborType.setSelectedIndex(0);
        this.repaint();
    }//GEN-LAST:event_rbLaborActionPerformed

    private void rbExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbExpenseActionPerformed
        this.lFilter3.setText("Payment Type");
        this.cbLaborType.removeAllItems();
        int counter=0;
        while(counter<=4)
        {
            this.cbLaborType.addItem((String)this.paymentType.get(counter));
            counter++;
        }
        this.cbLaborType.setSelectedIndex(0);
        this.repaint();
    }//GEN-LAST:event_rbExpenseActionPerformed

    /**
     * Apply selected search filters to search string
     * @return true if any search filters are selected
     */
    private boolean applyFilters(){
        boolean filterSelected = false;

        if(this.cbJobFilter.isSelected()&&this.tbJobSearch.getText().length()>0){
            this.filters[this.filterCount] = getJobFilter();
            filterSelected = true;
        }
        if(this.cbCustomerFilter.isSelected()&&this.tbCustomerFilter.getText().length()>0)
        {
            this.filters[this.filterCount] = getCustomerFilter();
            filterSelected = true;
        }

        if(this.cbLaborFilter.isSelected()&&this.cbLaborType.getSelectedIndex()>=0){
            this.filters[this.filterCount] = getLaborFilter();
            filterSelected = true;
        }
        if(this.cbKeywordFilter.isSelected()&&this.tbKeywordSearch.getText().length()>0){
            this.filters[this.filterCount] = getKeywordFilter();
            filterSelected = true;
        }
        if(this.rbSearchYear.isSelected()){
            this.filters[this.filterCount] = getYearFilter();
            filterSelected = true;
        }

        if(this.rbSearchMonth.isSelected()){
            this.filters[this.filterCount] = getMonthYearFilter();
            filterSelected = true;

        }
        if(this.rbSearchDateRange.isSelected()){
            this.filters[this.filterCount] = getDateRangeFilter();
            filterSelected = true;
        }

        if(this.filterCount==0)
        {
            JOptionPane.showMessageDialog(this, "At least one filter must be applied");
            filterSelected = false;
        }

        if(this.rbSearchDateRange.isSelected()&&!checkDateRanges()){
            JOptionPane.showMessageDialog(this, "End Date must be later than Start Date");
            filterSelected = false;
        }
        
        return filterSelected;
            
    }

    /**
     *
     * @return String - SQL filter by job number
     */
    private String getJobFilter(){
        String filter = "";
        String temp = this.tbJobSearch.getText();
        if(this.rbLabor.isSelected()||this.rbExpense.isSelected())
        {
            filter =  "((Job_Number like ('%" + temp + "%')))";
            this.filterCount++;
        }else
            filter = "";

        return filter;
    }

    private String getCustomerFilter(){

        DataConnection dcs = new DataConnection();
        ArrayList<String> jobs = new ArrayList<String>();
        dcs.connect();
        String filter = "";
        String tasks[] = this.tbCustomerFilter.getText().split(",");
        for(int i=0;i<tasks.length;i++)
            this.customers.add(tasks[i]);

        int custFilters = tasks.length;

        if(custFilters==1)  //only one customer entered
        {
            jobs = dcs.customerSearch(tasks);
            if(jobs.size()>0)
                filter+= "(Job_Number like ('%" + jobs.get(0) + "%'))";
        }else
        {
            filter+="(";
            jobs = dcs.customerSearch(tasks);
            //Add first result
            if(jobs.size()>0)
                filter+= "(Job_Number like ('%" + jobs.get(0) + "%'))";

            //add any remaining results
            for(int i = 1; i< jobs.size();i++)
            {
                filter+=" OR ";
                filter+= "(Job_Number like ('%" + jobs.get(i) + "%'))";

            }

            filter+=")";

        }
        dcs.closeConnection();
        this.filterCount++;

        return filter;
    }


    private String getLaborFilter(){
        String filter = "";
        int selection = this.cbLaborType.getSelectedIndex();
        
        if(this.rbLabor.isSelected()){
            switch(selection){

                case 0:     //PRODUCTIVE TIME
                    filter = " (Labor_Type = 'EESD Labor' OR Labor_Type = 'EESD Time and Half' "+
                            "OR Labor_Type = 'EESD Double Time')";
                    break;
                case 1:     //NON PRODUCTIVE TIME
                    filter = " (Labor_Type = 'EESD Unassigned' OR Labor_Type = 'EESD Unapplied' "+
                            "OR Labor_Type = 'EESD Authorized' OR Labor_Type = 'EESD Holiday' " +
                            "OR Labor_Type = 'EESD Vacation' OR Labor_Type = 'EESD Safety' " +
                            "OR Labor_Type = 'EESD Sick' OR Labor_Type = 'EESD CONC' " +
                            "OR Labor_Type = 'EESD Training' OR Labor_Type = 'EESD Marketing')";
                    break;
                case 2:     //EESD Labor
                    filter = " (Labor_Type = 'EESD Labor')";
                    break;
                case 3:     //EESD Time and Half
                    filter = " (Labor_Type = 'EESD Time and Half')";
                    break;
                case 4:     //EESD Double Time
                    filter = " (Labor_Type = 'EESD Double Time')";
                    break;
                case 5:     //EESD Unassigned
                    filter = " (Labor_Type = 'EESD Unassigned')";
                    break;
                case 6:     //EESD Unapplied
                    filter = " (Labor_Type = 'EESD Unapplied')";
                    break;
                case 7:     //EESD Authorized
                    filter = " (Labor_Type = 'EESD Authorized')";
                    break;
                case 8:    //EESD Holiday
                    filter = " (Labor_Type = 'EESD Holiday')";
                    break;
                case 9:    //EESD Vacation
                    filter = " (Labor_Type = 'EESD Vacation')";
                    break;
                case 10:    //EESD Safety
                    filter = " (Labor_Type = 'EESD Safety')";
                    break;
                case 11:    //EESD Training
                    filter = " (Labor_Type = 'EESD Training')";
                    break;
                case 12:    //EESD Marketing
                    filter = " (Labor_Type = 'EESD Marketing')";
                    break;
                case 13:
                    filter = " (Labor_Type = 'EESD Sick')";
                    break;
                case 14:
                    filter = " (Labor_Type = 'EESD CONC')";
                    break;
                default:
                    break;
            }
            this.filterCount++;
        }else if (this.rbExpense.isSelected())
        {
            switch(selection){

                case 0:     //AMEX
                    filter = " (PmtType = 'AMEX')";
                    break;
                case 1:     //Procard
                    filter = " (PmtType = 'ProCard')";
                    break;
                case 2:     //Cash
                    filter = " (PmtType = 'Cash')";
                    break;
                case 3:     //Personal CC
                    filter = " (PmtType = 'Personal CC')";
                    break;
                case 4:     //Other
                    filter = " (PmtType = 'Other')";
                    break;
                default:
                    break;
            }
            this.filterCount++;
        }else
            filter = "";


        return filter;
    }
 
    private String getKeywordFilter(){
        String filter = "";
        String temp = this.tbKeywordSearch.getText();
        
        if(this.rbLabor.isSelected()){
            filter =" ((Sunday_Comment like ('%" + temp + "%'))"  +
                   " OR (Monday_Comment like ('%" + temp + "%'))"+ " OR (Tuesday_Comment like ('%" + temp +"%'))" +
                   " OR (Wednesday_Comment like ('%" + temp + "%'))"+ " OR (Thursday_Comment like ('%" + temp + "%'))"+
                   " OR (Friday_Comment like ('%" + temp + "%'))" +" OR (Saturday_Comment like ('%" + temp + "%'))) ";
            this.filterCount++;
        }else if(this.rbExpense.isSelected()){
            filter = "((ExpComment like ('%" + temp + "%')) OR (ExpType like ('%" + temp +"%')))";
            this.filterCount++;
        }else
            filter = "";

        return filter;
    }

    private void setFilterArray(){
        this.laborType = new ArrayList<Object>();
        this.paymentType = new ArrayList<Object>();
        
        this.laborType.add("PRODUCTIVE");
        this.laborType.add("NON-PRODUCTIVE");
        this.laborType.add("EESD Labor");
        this.laborType.add("EESD Time and Half");
        this.laborType.add("EESD Double Time");
        this.laborType.add("EESD Unassigned");
        this.laborType.add("EESD Unapplied");
        this.laborType.add("EESD Authorized");
        this.laborType.add("EESD Holiday");
        this.laborType.add("EESD Vacation");
        this.laborType.add("EESD Safety");
        this.laborType.add("EESD Training");
        this.laborType.add("EESD Marketing");
        this.laborType.add("EESD Sick");
        this.laborType.add("EESD CONC");

        this.paymentType.add("AMEX");
        this.paymentType.add("ProCard");
        this.paymentType.add("Cash");
        this.paymentType.add("Personal CC");
        this.paymentType.add("Other");

    }

    private void getDBResults(){
        String searchString;
        dc.connect();

        if(this.rbLabor.isSelected()||otSearch)
            searchString = "SELECT * FROM TimeData";
        else
            searchString = "SELECT * FROM Expense";

        searchString += " WHERE (";

        if(this.filterCount>=1)
            searchString+= this.filters[0];
        if(this.filterCount>=2)
            searchString+= " AND " + this.filters[1];
        if(this.filterCount>=3)
            searchString+= " AND " + this.filters[2];
        if(this.filterCount==4)
            searchString+= " AND " + this.filters[3];
        if(this.filterCount==5)
            searchString+= " AND " + this.filters[4];

        searchString += " )";

        this.rs = this.dc.dbQuery(searchString);

        getResultCount();
        if(this.rbLabor.isSelected())
        {
            this.resultHours = new ArrayList<Object>();
            this.resultJobNum = new ArrayList<Object>();
            this.resultTaskID = new ArrayList<Object>();
            this.resultDate = new ArrayList<Object>();
            this.resultLaborType = new ArrayList<Object>();
            this.resultComment = new ArrayList<Object>();
        }else
        {
            this.resultHours = new ArrayList<Object>();
            this.resultJobNum = new ArrayList<Object>();
            this.resultTaskID = new ArrayList<Object>();
            this.resultDate = new ArrayList<Object>();
            this.resultLaborType = new ArrayList<Object>();
            this.resultComment = new ArrayList<Object>();
            this.resultPmtType = new ArrayList<Object>();
            
        }

        
    }

    private void getResultCount(){
        int counter;
        this.resultCount = 0;

        if(this.rs==null){
            return;
        }

        try{
            while(this.rs.next()){
                this.resultCount++;
            }

            //move back to begining of set
            for(counter=this.resultCount;counter>=0;counter--){
                this.rs.previous();
            }
        }catch (Exception e) {
             JOptionPane.showMessageDialog(this, e);

        }
    }
    
    private void generateReport(){

        boolean records = false;
        int textFormat;
        String rsLine = "";
        String results;
        DateFormat dateFormat = new SimpleDateFormat("EEE MMM dd yyyy");
        this.resultHeader = new String[this.filterCount+4];
        boolean laborSearch = this.rbLabor.isSelected();
        boolean expenseSearch = this.rbExpense.isSelected();
        
        try{
            if(this.resultCount>0){

                //ADD CODE TO SEPERATE RESULTS BY SPECIFIC DATE
                if(this.rbSearchMonth.isSelected()||
                        this.rbSearchDateRange.isSelected()||this.rbSearchYear.isSelected())
                  {
                       records=getSpecificDateRange();
                  }else
                  {
                       records=getNonSpecificDateRange();
                  }
                 
                  if(records){
                      sortSearchResults();
                  }

            }
            this.rs.close();

            //make display header
            int arrayCtr=0;

            this.resultHeader[arrayCtr++]="Time Entry Database Search Returned " +
                    Integer.toString(this.resultCount)+ " Records\n";
            this.resultHeader[arrayCtr++]="Search Parameters\n";

            //Add search parameters to output
            if(this.rbLabor.isSelected())
                this.resultHeader[arrayCtr++]= "Labor Database Search \n";
            if(this.rbExpense.isSelected())
                this.resultHeader[arrayCtr++]= "Expense Database Search \n";
            if(this.cbJobFilter.isSelected())
                this.resultHeader[arrayCtr++]="Job/Project Filter: " + this.tbJobSearch.getText() + "\n";
            if(this.cbKeywordFilter.isSelected())
                this.resultHeader[arrayCtr++]="   Keyword Filter: " + this.tbKeywordSearch.getText() + "\n";
            if(this.cbCustomerFilter.isSelected()){
                String taskString=            "  Customer Filter: ";
                for(int i=0;i<this.taskIDs.size();i++)
                {
                    taskString+= (String)this.taskIDs.get(i) + " ";
                }
                taskString+= "\n";
                this.resultHeader[arrayCtr++]=taskString;
            }
            if(this.cbLaborFilter.isSelected())
                if(laborSearch)
                    this.resultHeader[arrayCtr++]="Labor Type Filter: " + (String)this.laborType.get(this.cbLaborType.getSelectedIndex()) + "\n";
                else
                    this.resultHeader[arrayCtr++]="Expense Type Filter: " + (String)this.paymentType.get(this.cbLaborType.getSelectedIndex()) + "\n";
            if(this.rbEntireDB.isSelected())
                this.resultHeader[arrayCtr++]="  Database Search: Entire Database\n";
            if(this.rbSearchYear.isSelected())
                this.resultHeader[arrayCtr++]="  Database Search: " + this.yearSearch + "\n";
            if(this.rbSearchMonth.isSelected())
                this.resultHeader[arrayCtr++]="  Database Search: " + this.monthSearch + "\n";
            if(this.rbSearchDateRange.isSelected())
                this.resultHeader[arrayCtr++]="  Database Search: " + this.startDateRange + " - " +
                        this.endDateRange + "\n";

            //addHeader to result String
            int i=0;
            results = "";
            while(i<arrayCtr){
                results+=this.resultHeader[i++];
            }
            if(laborSearch)
                results+="\nDate\t\t\t\t JOB\t\t\t\tTASK\t LABOR TYPE\t\t Hours  Comment\n";
            else if(expenseSearch)
                results+="\nDate\t\t\t\t JOB\t\t\t\tTASK\t EXPENSE TYPE\t\t Amount\t    PAY TYPE     Comment\n";

            if(records){
                int counter=0;
                while(counter<this.resultDate.size())
                {
                    //add results to result string

                    //Add Date
                    rsLine=dateFormat.format((java.util.Date)this.resultDate.get(counter));
                    for(textFormat=0;rsLine.length()<=20;textFormat++)
                        rsLine+=" ";

                    //Add Job Number
                    rsLine+=(String)this.resultJobNum.get(counter);
                    for(textFormat=0;rsLine.length()<=40;textFormat++)
                        rsLine+=" ";

                    //Add Task ID
                    rsLine+=(String)this.resultTaskID.get(counter);
                    for(textFormat=0;rsLine.length()<=45;textFormat++)
                        rsLine+=" ";

                    //Add labor or Expense Type
                    rsLine+=(String)this.resultLaborType.get(counter);
                    for(textFormat=0;rsLine.length()<=65;textFormat++)
                        rsLine+=" ";

                    //Add hours or Amount
                    if(expenseSearch){
                        rsLine+="$ " + formatter.format((Double)this.resultHours.get(counter));
                        for(textFormat=0;rsLine.length()<=78;textFormat++)
                            rsLine+=" ";
                    }
                    else
                    {
                        rsLine+=formatter.format((Double)this.resultHours.get(counter));
                        for(textFormat=0;rsLine.length()<=72;textFormat++)
                        rsLine+=" ";
                    }
                    

                    //IF Expense add Pmt type
                    if(expenseSearch)
                    {
                        rsLine+=(String)this.resultPmtType.get(counter);
                        for(textFormat=0;rsLine.length()<=91;textFormat++)
                        rsLine+=" ";
                    }

                    //Add Comment
                    rsLine+=(String)this.resultComment.get(counter) + "\n";

                    counter++;
                    results+=rsLine;
                }
                if(this.rbLabor.isSelected())
                    this.resultFooter= "\nTotal Hours for Search: " + formatter.format(this.totalHours);
                else if(this.rbExpense.isSelected())
                    this.resultFooter= "\nTotal Expense for Search: $ " + formatter.format(this.totalHours);

                results += this.resultFooter;
                this.taResults.setText(results);
                //this.bExportCSV.setEnabled(true);
            }
            else{
                this.taResults.setText(results + "\n NO MATCHES FOUND");
                this.bExportCSV.setEnabled(false);
            }
            
        }
         catch (Exception e) {
              //connectionErr(e);
             JOptionPane.showMessageDialog(this, e);

        }
    }

    private String getYearFilter(){
        String filter="";
        Calendar searchCal = Calendar.getInstance();
        int startYear;
        int endYear;
        int startWeek;
        int endWeek;

        this.filterCount++;
        //SET CURRENT YEAR
        try{
            this.spYear.commitEdit();
        }catch(Exception e)
        {
            System.out.println(e);
        }
        searchCal.setTime((java.util.Date)this.spYear.getValue());
        this.yearSearch = Integer.toString(searchCal.get(Calendar.YEAR));

        //CHECK FIRST WEEK OF THE YEAR
        searchCal.set(Calendar.MONTH, Calendar.JANUARY);
        searchCal.set(Calendar.DAY_OF_MONTH,1);
        searchCal.set(Calendar.DAY_OF_WEEK, 7);
        startYear = searchCal.get(Calendar.YEAR);
        startWeek = searchCal.get(Calendar.WEEK_OF_YEAR);

        //CHECK LAST WEEK OF YEAR
        searchCal.add(Calendar.YEAR, 1);
        searchCal.set(Calendar.DAY_OF_YEAR, 1);
        searchCal.add(Calendar.DAY_OF_YEAR, -1);
        searchCal.set(Calendar.DAY_OF_WEEK, 7);
        endYear = searchCal.get(Calendar.YEAR);
        endWeek = searchCal.get(Calendar.WEEK_OF_YEAR);


        filter = " (((Year = " + Integer.toString(startYear) + " ) AND " +
                "(Week_Number >= " + Integer.toString(startWeek) + ")) OR " +
                "(Year = " + this.yearSearch + " ) OR " +
                "((Year = " + Integer.toString(endYear) + " ) AND " +
                "(Week_Number <= " + Integer.toString(endWeek) + ")))";
        return filter;

    }

    private String getMonthYearFilter(){
        String filter="";
        Calendar searchCal = Calendar.getInstance();

        int month;
        int startWeek;
        int startYear;
        int endWeek;
        int endYear;

        this.filterCount++;
        try{
            this.spMonthYear.commitEdit();
        }catch(Exception e)
        {
            System.out.println(e);
        }
        searchCal.setTime((java.util.Date)this.spMonthYear.getValue());
        DateFormat dateFormat = new SimpleDateFormat("MMMMM yyyy");
        this.monthSearch = dateFormat.format(searchCal.getTime());
        month = searchCal.get(Calendar.MONTH);
        searchCal.set(Calendar.DAY_OF_MONTH, 1);
        searchCal.set(Calendar.DAY_OF_WEEK, 7);
        startWeek = searchCal.get(Calendar.WEEK_OF_YEAR);
        startYear = searchCal.get(Calendar.YEAR);

        searchCal.set(Calendar.MONTH, month+1);
        searchCal.set(Calendar.DAY_OF_MONTH, 1);
        searchCal.add(Calendar.DAY_OF_MONTH,-1);
        searchCal.set(Calendar.DAY_OF_WEEK, 7);
        endWeek = searchCal.get(Calendar.WEEK_OF_YEAR);
        endYear = searchCal.get(Calendar.YEAR);

        if(startYear==endYear)
            filter = "(((Year >=  " + Integer.toString(startYear) + ") AND " +
                    "(Week_Number >=  " + Integer.toString(startWeek)  + ")) AND " +
                    "((Year <=  " + Integer.toString(endYear) + ") AND " +
                    "(Week_Number <=  " + Integer.toString(endWeek) + ")))";
        else if(startYear<endYear){
            //Special case to handle searches in December or Januaray
            filter = "((((Year >=  " + Integer.toString(startYear) + ") AND " +
                    "(Week_Number >=  " + Integer.toString(startWeek)  + ")) AND " +
                    "(Year <  " + Integer.toString(endYear) + ")) OR ((Year = " +
                    Integer.toString(endYear) + ") AND " +
                    "(Week_Number <=  " + Integer.toString(endWeek) + ")))";
        }
        
        return filter;

    }

    private String getDateRangeFilter(){
        String filter = "";
        Calendar searchCal = Calendar.getInstance();
        DateFormat dateFormat = new SimpleDateFormat("MMMMM dd yyyy");
        int startYear,endYear;
        int startWeek,endWeek;

        this.filterCount++;
        try{
            this.spStartDate.commitEdit();
            this.spEndDate.commitEdit();
        }catch(Exception e)
        {
            System.out.println(e);
        }
        if(otSearch)
            searchCal.setTime(otSearchStart);
        else
            searchCal.setTime((java.util.Date)this.spStartDate.getValue());
        this.startDateRange = dateFormat.format(searchCal.getTime());
        searchCal.set(Calendar.DAY_OF_WEEK,7);
        startYear = searchCal.get(Calendar.YEAR);
        startWeek = searchCal.get(Calendar.WEEK_OF_YEAR);
        if(otSearch)
            searchCal.setTime(otSearchEnd);
        else
            searchCal.setTime((java.util.Date)this.spEndDate.getValue());
        this.endDateRange = dateFormat.format(searchCal.getTime());
        searchCal.set(Calendar.DAY_OF_WEEK,7);
        endYear = searchCal.get(Calendar.YEAR);
        endWeek = searchCal.get(Calendar.WEEK_OF_YEAR);

        int yearCount = endYear-startYear;
        //IF Search is within the same Year
        if(yearCount==0)
        {
            filter = "((Year =  " + Integer.toString(startYear) + ") AND ((" +
                    "Week_Number >=  " + Integer.toString(startWeek)  + ") AND " +
                    "Week_Number <=  " + Integer.toString(endWeek) + "))";
        }else if(yearCount>=1){
            //Add partial first year
            filter = "((Year =  " + Integer.toString(startYear) + " AND " +
                "Week_Number >=  " + Integer.toString(startWeek)  + ") OR ";

            //Add interm years
            for(int i=1;i<yearCount;i++){
                filter+= "(Year = " + Integer.toString(startYear+i) + ") OR ";
            }

            //add final partial year
            filter +="(Year =  " + Integer.toString(endYear) + " AND " +
               "Week_Number <=  " + Integer.toString(endWeek) + " )) ";
        }
               
        return filter;

    }

    /**
     *
     * @return boolean true if end date is after start date
     */

    private boolean checkDateRanges(){
        boolean datesOK = false;

        Calendar startDate = Calendar.getInstance();
        Calendar endDate = Calendar.getInstance();

        startDate.setTime((java.util.Date)this.spStartDate.getValue());
        endDate.setTime((java.util.Date)this.spEndDate.getValue());

        datesOK = endDate.getTime().after(startDate.getTime());
        
        return datesOK;
    }

    private boolean getNonSpecificDateRange(){

        String jobNumber;
        String taskID;
        String laborTyp;
        String comment;
        Double tempHours;
        Double tempExpAmt;
        Calendar search = Calendar.getInstance();
        //int arrayCounter = 0;
        boolean results=false;
        this.totalHours = 0.0;
        boolean laborSearch = this.rbLabor.isSelected();
        boolean expenseSearch = this.rbExpense.isSelected();

        try{
            while(this.rs.next()){
                    //Set line parameters
                    search.set(Calendar.YEAR, this.rs.getInt(2));
                    search.set(Calendar.WEEK_OF_YEAR, this.rs.getInt(3));
                    search.set(Calendar.DAY_OF_WEEK,1);
                    jobNumber = this.rs.getString(4);
                    taskID = this.rs.getString(5);
                    laborTyp = this.rs.getString(6);

                    if(laborSearch)
                    {
                        //Step through week of Data
                        for(int counter=7;counter<=19;counter+=2){

                            tempHours = this.rs.getDouble(counter);
                            comment = this.rs.getString(counter+1);
                            if(tempHours>0){

                                this.resultDate.add(search.getTime());
                                this.resultJobNum.add(jobNumber);
                                this.resultTaskID.add(taskID);
                                this.resultLaborType.add(laborTyp);
                                this.resultHours.add(tempHours);
                                this.resultComment.add(comment);

                                //arrayCounter++;
                                this.totalHours+=tempHours;
                                results = true;
                            }
                            //Increase Day by 1
                            search.add(Calendar.DAY_OF_YEAR, 1);
                         }
                    }else if(expenseSearch)
                    {
                        tempExpAmt = this.rs.getDouble(10);
                        comment = this.rs.getString(11);
                        search.add(Calendar.DAY_OF_YEAR, this.rs.getInt(9)-1);
                        this.resultDate.add(search.getTime());
                        this.resultJobNum.add(jobNumber);
                        this.resultTaskID.add(taskID);
                        this.resultLaborType.add(laborTyp);
                        this.resultHours.add(tempExpAmt);
                        this.resultComment.add(comment);
                        this.resultPmtType.add(this.rs.getString(7));

                        //arrayCounter++;
                        this.totalHours+=tempExpAmt;
                        results = true;
                    }
                }
        }catch (Exception e) {
             JOptionPane.showMessageDialog(this, e);
        }

        return results;
    }

    protected void otSearch(Date start, Date end){
        otSearchStart = start;
        otSearchEnd = end;
        otSearch = true;
        this.filterCount=0;
        this.filters[0] = getDateRangeFilter();
        getDBResults();
        getSpecificDateRange();
        sortSearchResults();
        /*
        Object[][] results = {resultDate,resultJobNum,resultTaskID,resultLaborType,
            resultHours,resultComment};
        return results;
         * *
         */
    }

    protected boolean getSpecificDateRange(){

        String jobNumber;
        String taskID;
        String laborTyp;
        Double tempHours;
        Double tempExpAmt;
        //String comment;
        int startWeek;
        int startYear;
        int startDayOfWeek;
        int endWeek;
        int endYear;
        int endDayOfWeek;
        int startWeekDayKey;
        int endWeekDayKey;
        int wk,yr;
        Calendar search = Calendar.getInstance();
        boolean laborSearch = this.rbLabor.isSelected();
        boolean expenseSearch = this.rbExpense.isSelected();
        int expenseDay=0;
        String pmtType="";
        //int arrayCounter=0;
        boolean results = false;
        Utilities u = new Utilities();

        //SET START & END DATE FOR MONTH, YEAR SEARCH
        if(this.rbSearchMonth.isSelected()&&!otSearch){
            //get date spinner value
            search.setTime((java.util.Date)this.spMonthYear.getValue());

            //move to first day of month
            search.set(Calendar.DAY_OF_MONTH,1);
            startDayOfWeek = search.get(Calendar.DAY_OF_WEEK);
            //startWeekDayKey = getDayKey(startDayOfWeek);
            startWeekDayKey = u.getDayKey(startDayOfWeek);
            search.set(Calendar.DAY_OF_WEEK,7);
            //SET START VALUES
            startYear = search.get(Calendar.YEAR);
            startWeek = search.get(Calendar.WEEK_OF_YEAR);

            

            //move to last day of month
            search.setTime((java.util.Date)this.spMonthYear.getValue());
            search.set(Calendar.DAY_OF_MONTH,1);
            search.add(Calendar.DAY_OF_YEAR,32);
            search.set(Calendar.DAY_OF_MONTH,1);
            search.add(Calendar.DAY_OF_YEAR, -1);
            endDayOfWeek = search.get(Calendar.DAY_OF_WEEK);
            //endWeekDayKey = getDayKey(endDayOfWeek);
            endWeekDayKey = u.getDayKey(endDayOfWeek);
            search.set(Calendar.DAY_OF_WEEK,7);
            //SET END VALUES
            endYear = search.get(Calendar.YEAR);
            endWeek = search.get(Calendar.WEEK_OF_YEAR);
            
            
         }else
        //SET START & END DAY FOR DATE RANGE SEARCH
        if(this.rbSearchDateRange.isSelected()||otSearch){
            //get date spinner value
            if(otSearch)
                search.setTime(otSearchStart);
            else
                search.setTime((java.util.Date)this.spStartDate.getValue());
            //SET START VALUES
            startDayOfWeek = search.get(Calendar.DAY_OF_WEEK);
            //startWeekDayKey = getDayKey(startDayOfWeek);
            startWeekDayKey = u.getDayKey(startDayOfWeek);
            search.set(Calendar.DAY_OF_WEEK,7);
            startYear = search.get(Calendar.YEAR);
            startWeek = search.get(Calendar.WEEK_OF_YEAR);
            

            //move to last day of month
            if(otSearch)
                search.setTime(otSearchEnd);
            else
                search.setTime((java.util.Date)this.spEndDate.getValue());
            endDayOfWeek = search.get(Calendar.DAY_OF_WEEK);
            //endWeekDayKey = getDayKey(endDayOfWeek);
            endWeekDayKey = u.getDayKey(endDayOfWeek);
            //SET END VALUES
            search.set(Calendar.DAY_OF_WEEK,7);
            endYear = search.get(Calendar.YEAR);
            endWeek = search.get(Calendar.WEEK_OF_YEAR);
            
        }else

        //SET START & END DAY FOR YEAR SEARCH
        if(this.rbSearchYear.isSelected()&&!otSearch){
            //get date spinner value
            search.setTime((java.util.Date)this.spYear.getValue());
            //move to first day of month 1
            search.set(Calendar.MONTH,Calendar.JANUARY);
            search.set(Calendar.DAY_OF_MONTH,1);
            startDayOfWeek = search.get(Calendar.DAY_OF_WEEK);
            //startWeekDayKey = getDayKey(startDayOfWeek);
            startWeekDayKey = u.getDayKey(startDayOfWeek);
            //SET START VALUES
            search.set(Calendar.DAY_OF_WEEK, 7);
            startYear = search.get(Calendar.YEAR);
            startWeek = search.get(Calendar.WEEK_OF_YEAR);
            search.set(Calendar.DAY_OF_YEAR,1);

            //move to last day of year
            search.add(Calendar.YEAR,1);
            search.add(Calendar.DAY_OF_YEAR, -1);
            endDayOfWeek = search.get(Calendar.DAY_OF_WEEK);
            //endWeekDayKey = getDayKey(endDayOfWeek);
            endWeekDayKey = u.getDayKey(endDayOfWeek);

            //SET END VALUES
            search.set(Calendar.DAY_OF_WEEK, 7);
            endYear = search.get(Calendar.YEAR);
            endWeek = search.get(Calendar.WEEK_OF_YEAR);

        }else
            return false;

        this.totalHours = 0.0;

        try{
            //START SEARCH
            while(this.rs.next()){
                    //Set line parameters for line in result set
                    yr = this.rs.getInt(2);
                    search.set(Calendar.YEAR, yr);
                    wk = this.rs.getInt(3);
                    search.set(Calendar.WEEK_OF_YEAR, wk);
                    search.set(Calendar.DAY_OF_WEEK,Calendar.SUNDAY);

                    jobNumber = this.rs.getString(4);
                    taskID = this.rs.getString(5);
                    laborTyp = this.rs.getString(6);
                    if(expenseSearch)
                        pmtType = this.rs.getString(7);

                    //CHECK if at start WEEK & YEAR
                    if((yr==startYear)&&(wk==startWeek)){
                        if(laborSearch)
                        {
                            //Set correct date for key
                            search.add(Calendar.DAY_OF_YEAR, startDayOfWeek-1);
                            //Step through week of Data
                            for(int counter=startWeekDayKey;counter<=19;counter+=2){

                                //GET hours
                                tempHours = this.rs.getDouble(counter);
                                if(tempHours>0){

                                    this.resultDate.add(search.getTime());
                                    this.resultJobNum.add(jobNumber);
                                    this.resultTaskID.add(taskID);
                                    this.resultLaborType.add(laborTyp);
                                    this.resultHours.add(tempHours);
                                    this.resultComment.add(this.rs.getString(counter+1));

                                    //arrayCounter++;
                                    this.totalHours+=tempHours;
                                    results = true;
                                }
                                //Increase Day by 1

                                search.add(Calendar.DAY_OF_YEAR, 1);
                            }
                        }else if(expenseSearch)
                        {
                            expenseDay = rs.getInt(9);
                            if(expenseDay>=startDayOfWeek)
                            {
                                tempExpAmt = this.rs.getDouble(10);
                                search.add(Calendar.DAY_OF_YEAR, expenseDay-1);
                                this.resultDate.add(search.getTime());
                                this.resultJobNum.add(jobNumber);
                                this.resultTaskID.add(taskID);
                                this.resultLaborType.add(laborTyp);
                                this.resultHours.add(tempExpAmt);
                                this.resultPmtType.add(pmtType);
                                this.resultComment.add(this.rs.getString(11));

                                //arrayCounter++;
                                this.totalHours+=tempExpAmt;
                                results = true;
                            }
                        }
                    }else  //END START WEEK

                    //AT END WEEK AND YEAR
                    if((yr==endYear)&&(wk==endWeek))
                    {
                        if(laborSearch)
                        {
                            for(int counter=7;counter<=endWeekDayKey;counter+=2){

                                //GET hours
                                tempHours = this.rs.getDouble(counter);
                                if(tempHours>0){

                                    this.resultDate.add(search.getTime());
                                    this.resultJobNum.add(jobNumber);
                                    this.resultTaskID.add(taskID);
                                    this.resultLaborType.add(laborTyp);
                                    this.resultHours.add(tempHours);
                                    this.resultComment.add(this.rs.getString(counter+1));

                                    //arrayCounter++;
                                    this.totalHours+=tempHours;
                                    results = true;
                                }
                                //Increase Day by 1
                                search.add(Calendar.DAY_OF_YEAR, 1);
                            }
                        }else if(expenseSearch)
                        {
                            expenseDay = rs.getInt(9);
                            if(expenseDay<=endDayOfWeek)
                            {
                                tempExpAmt = this.rs.getDouble(10);
                                search.add(Calendar.DAY_OF_YEAR, expenseDay-1);
                                this.resultDate.add(search.getTime());
                                this.resultJobNum.add(jobNumber);
                                this.resultTaskID.add(taskID);
                                this.resultLaborType.add(laborTyp);
                                this.resultHours.add(tempExpAmt);
                                this.resultPmtType.add(pmtType);
                                this.resultComment.add(this.rs.getString(11));

                                //arrayCounter++;
                                this.totalHours+=tempExpAmt;
                                results = true;
                            }
                        }

                    }else

                    //BETWEEN START WEEK, YEAR AND END WEEK,YEAR
                    {
                      //Step through week of Data
                        if(laborSearch)
                        {
                            for(int counter=7;counter<=19;counter+=2){

                                //GET hours
                                tempHours = this.rs.getDouble(counter);
                                if(tempHours>0){

                                    this.resultDate.add(search.getTime());
                                    this.resultJobNum.add(jobNumber);
                                    this.resultTaskID.add(taskID);
                                    this.resultLaborType.add(laborTyp);
                                    this.resultHours.add(tempHours);
                                    this.resultComment.add(this.rs.getString(counter+1));

                                    //arrayCounter++;
                                    this.totalHours+=tempHours;
                                    results = true;
                                }
                                //Increase Day by 1
                                search.add(Calendar.DAY_OF_YEAR, 1);
                            }
                        }else if(expenseSearch)
                        {
                            expenseDay = rs.getInt(9);
                            tempExpAmt = this.rs.getDouble(10);
                            search.add(Calendar.DAY_OF_YEAR, expenseDay-1);
                            this.resultDate.add(search.getTime());
                            this.resultJobNum.add(jobNumber);
                            this.resultTaskID.add(taskID);
                            this.resultLaborType.add(laborTyp);
                            this.resultHours.add(tempExpAmt);
                            this.resultPmtType.add(pmtType);
                            this.resultComment.add(this.rs.getString(11));

                            //arrayCounter++;
                            this.totalHours+=tempExpAmt;
                            results = true;
                        }
                    }
                }
        }catch (Exception e) {
             JOptionPane.showMessageDialog(this, e);
        }

        return results;

    }


    private void sortSearchResults(){
        int counter, index, length;

        Object tempDate;
        Object tempHrs;
        Object tempJob;
        Object tempTask;
        Object tempLabor;
        Object tempComm;
        Object tempPmt="";
        boolean isExpense;
  
        //getlength
        /*
        counter=0;
        while(this.resultHours[counter] != null)
        {
            counter++;
        }
         *
         */
        this.resultCount = this.resultHours.size();
        length = this.resultCount;
        isExpense = this.rbExpense.isSelected();

        //BUBBLE SORT RESULTS

        for(counter=0; counter<length-1; counter++) { //Loop once for each element in the array.
            for(index=0; index<length-1-counter; index++) { //Once for each element, minus the counter.
                if(((java.util.Date)this.resultDate.get(index)).after((java.util.Date)this.resultDate.get(index+1))) { //Test if need a swap or not.
                    tempDate = this.resultDate.get(index); //These three lines just swap the two elements:
                    tempHrs = this.resultHours.get(index);
                    tempJob = this.resultJobNum.get(index);
                    tempTask = this.resultTaskID.get(index);
                    tempLabor = this.resultLaborType.get(index);
                    tempComm = this.resultComment.get(index);
                    if(isExpense)
                        tempPmt = this.resultPmtType.get(index);

                    this.resultDate.set(index,this.resultDate.get(index+1));
                    this.resultHours.set(index,this.resultHours.get(index+1));
                    this.resultJobNum.set(index,this.resultJobNum.get(index+1));
                    this.resultTaskID.set(index,this.resultTaskID.get(index+1));
                    this.resultLaborType.set(index,this.resultLaborType.get(index+1));
                    this.resultComment.set(index,this.resultComment.get(index+1));
                    if(isExpense)
                        this.resultPmtType.set(index,this.resultPmtType.get(index+1));
                    this.resultDate.set(index+1,tempDate);
                    this.resultHours.set(index+1,tempHrs);
                    this.resultJobNum.set(index+1,tempJob);
                    this.resultTaskID.set(index+1,tempTask);
                    this.resultLaborType.set(index+1,tempLabor);
                    this.resultComment.set(index+1,tempComm);
                    if(isExpense)
                        this.resultPmtType.set(index+1,tempPmt);
                }
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bExit;
    private javax.swing.JButton bExportCSV;
    private javax.swing.JButton bSearch;
    private javax.swing.ButtonGroup bgSearchSelection;
    private javax.swing.ButtonGroup bgSearchType;
    private javax.swing.JCheckBox cbCustomerFilter;
    private javax.swing.JCheckBox cbJobFilter;
    private javax.swing.JCheckBox cbKeywordFilter;
    private javax.swing.JCheckBox cbLaborFilter;
    private javax.swing.JComboBox cbLaborType;
    private javax.swing.JFileChooser fc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lEndDate;
    private javax.swing.JLabel lFilter3;
    private javax.swing.JLabel lMonthYear;
    private javax.swing.JLabel lStartDate;
    private javax.swing.JLabel lYear;
    private javax.swing.JRadioButton rbEntireDB;
    private javax.swing.JRadioButton rbExpense;
    private javax.swing.JRadioButton rbLabor;
    private javax.swing.JRadioButton rbSearchDateRange;
    private javax.swing.JRadioButton rbSearchMonth;
    private javax.swing.JRadioButton rbSearchYear;
    private javax.swing.JSpinner spEndDate;
    private javax.swing.JSpinner spMonthYear;
    private javax.swing.JSpinner spStartDate;
    private javax.swing.JSpinner spYear;
    private javax.swing.JTextArea taResults;
    private javax.swing.JTextField tbCustomerFilter;
    private javax.swing.JTextField tbJobSearch;
    private javax.swing.JTextField tbKeywordSearch;
    // End of variables declaration//GEN-END:variables

}
